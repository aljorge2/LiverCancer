M_1_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_1_HBV")],1,mean,na.rm=TRUE)
M_0_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_0_HBV")],1,mean,na.rm=TRUE)
M_1_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_1_HCV")],1,mean,na.rm=TRUE)
M_0_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_0_HCV")],1,mean,na.rm=TRUE)
F_1_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_1_HBV")],1,mean,na.rm=TRUE)
F_0_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_0_HBV")],1,mean,na.rm=TRUE)
F_1_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_1_HCV")],1,mean,na.rm=TRUE)
F_0_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_0_HCV")],1,mean,na.rm=TRUE)
keep <- (M_1_HBV_mean_fpkm > 0.5 | M_0_HBV_mean_fpkm > 0.5 |
M_1_HCV_mean_fpkm > 0.5 | M_0_HCV_mean_fpkm > 0.5 |
F_1_HBV_mean_fpkm > 0.5 | F_0_HBV_mean_fpkm > 0.5 |
F_1_HCV_mean_fpkm > 0.5 | F_0_HCV_mean_fpkm > 0.5 )
dge <- dge[keep,,keep.lib.sizes=FALSE]
# N of genes retained after filtering
dim(dge$genes)
# Pulling X degenerate expression data from dge variable into individual variables
dge <- as.data.frame(dge)
gene0 <- dge[which(dge$gene_name=="KDM5D"),]
gene1 <- dge[which(dge$gene_name=="DDX3Y"),]
gene2 <- dge[which(dge$gene_name=="EIF1AY"),]
gene3 <- dge[which(dge$gene_name=="TXLNGY"),]
gene4 <- dge[which(dge$gene_name=="TSPY1"),]
#gene5 <- dge[which(dge$gene_name=="AR"),]
#gene6 <- dge[which(dge$gene_name=="XIST"),]
#creating data frame of all genes we will be working with
xDegenerateExpression<- rbind(gene0,gene1,gene2,gene3,gene4)
#making the gene names the rownames
rownames(xDegenerateExpression) <- xDegenerateExpression$gene_name
#subsetting out all columns that are not expression data
xDegenerateExpression <- subset(xDegenerateExpression, select = -c(chr, start, end, TXNAME, GENEID, length,gene_name))
xDegenerateExpression <- as.data.frame(t(xDegenerateExpression))
#for (i in 1:dim(xDegenerateExpression)[1]) {
#   xDegenerateExpression$Names[i] = substr(row.names(xDegenerateExpression)[i],3,5)
#}
Tumor_expressionData <- xDegenerateExpression[grepl("tumor",rownames(xDegenerateExpression),fixed=TRUE),]
Tumor_expressionData <- as.data.frame(Tumor_expressionData)
test <- Tumor_expressionData[1,]
test <- t(test)
test <- as.data.frame(test)
test$gene <- rownames(test)
colnames(test) <- c("RK002","gene")
ggplot(test, aes(x=gene, y=RK002)) + geom_line() + geom_point()
#plot(Tumor_expressionData)
#creating scatterplot
#ggplot(gene0,aes(x=, y=Expression)) + geom_point()
View(Tumor_expressionData)
# Pulling X degenerate expression data from dge variable into individual variables
dge <- as.data.frame(dge)
gene0 <- dge[which(dge$gene_name=="KDM5D"),]
gene1 <- dge[which(dge$gene_name=="DDX3Y"),]
gene2 <- dge[which(dge$gene_name=="EIF1AY"),]
gene3 <- dge[which(dge$gene_name=="TXLNGY"),]
gene4 <- dge[which(dge$gene_name=="TSPY1"),]
#gene5 <- dge[which(dge$gene_name=="AR"),]
#gene6 <- dge[which(dge$gene_name=="XIST"),]
#creating data frame of all genes we will be working with
xDegenerateExpression<- rbind(gene0,gene1,gene2,gene3,gene4)
#making the gene names the rownames
rownames(xDegenerateExpression) <- xDegenerateExpression$gene_name
#subsetting out all columns that are not expression data
xDegenerateExpression <- subset(xDegenerateExpression, select = -c(chr, start, end, TXNAME, GENEID, length,gene_name))
xDegenerateExpression <- as.data.frame(t(xDegenerateExpression))
#subsetting by tumor
Tumor_expressionData <- xDegenerateExpression[grepl("tumor",rownames(xDegenerateExpression),fixed=TRUE),]
Tumor_expressionData <- as.data.frame(Tumor_expressionData)
#Creating Names column
for (i in 1:dim(Tumor_expressionData)[1]) {
Tumor_expressionData$Names[i] = substr(row.names(Tumor_expressionData)[i],3,5)
}
library(RColorBrewer)
library(matrixStats)
library(ggplot2)
library(edgeR)
library(DESeq2)
library(limma)
library(doParallel)
library(variancePartition)
library(org.Hs.eg.db)
library(clusterProfiler)
library(GOSemSim)
library(biomaRt)
library(UpSetR)
library(VennDiagram)
library(ggrepel)
library(dplyr)
library(stringr)
library(forcats)
library(stats)
library(gridExtra)
setwd('~/Desktop/ResearchProjects/LiverCancerProject/DEA_removed_samples')
metadata <- read.table("~/Desktop/ResearchProjects/LiverCancerProject/Metadata/metadata_for_de.csv", row.names=1,header=TRUE, sep=",") #changing the name of the file
tumorAdjacentExp <- read.table("~/Desktop/ResearchProjects/LiverCancerProject/Metadata/japan_all_samples_salmon_expression_counts.txt", row.names = 1, header=TRUE) #changing the name of the file
colnames(tumorAdjacentExp) <- gsub("\\.", "-", colnames(tumorAdjacentExp)) #changing the column names
# Importing gene annotations
#genes <- read.table("gencode.v25.chr_patch_hapl_scaff.annotation.bed", header=FALSE, sep="\t")
genes <- read.table("~/Desktop/ResearchProjects/LiverCancerProject/Metadata/gencodeTranscripts.txt", header=TRUE, sep="\t")
genes <- data.frame(genes)
tumorAdjacentExp <- tumorAdjacentExp[rownames(tumorAdjacentExp) %in% genes$GENEID ,]
genes <- genes[match(rownames(tumorAdjacentExp), genes$GENEID),]
# Calculating gene length, this is needed for calculating the FPKM values
genes$length <- with(genes, end - start)
# Removing Samples due to low quality
metadata <- metadata[!(metadata$ID == "RK023") , ]
metadata <- metadata[!(metadata$ID == "RK106") , ]
metadata <- metadata[!(metadata$ID == "RK113") , ]
metadata <- metadata[!(metadata$ID == "RK135") , ]
metadata <- metadata[!(metadata$ID == "RK105") , ]
metadata <- metadata[!(metadata$ID == "RK116") , ]
metadata <- metadata[!(metadata$ID == "RK066") , ]
metadata <- metadata[!(metadata$ID == "RK096") , ]
#Removing both and NBNC samples
metadata <- metadata[!(metadata$Virus_infection == "NBNC"), ]
metadata <- metadata[!(metadata$Virus_infection == "both"), ]
# Subsetting and ordering metadata to match the count matrix
tumorAdjacentExpSubset <- tumorAdjacentExp[,colnames(tumorAdjacentExp) %in% metadata$sampleid]
metadataSubset <- metadata[metadata$sampleid %in% colnames(tumorAdjacentExpSubset),]
metadataSubset <- metadataSubset[match(colnames(tumorAdjacentExpSubset), metadataSubset$sampleid),]
rownames(metadataSubset) <- metadataSubset$sampleid
# Adding tissue type, converting categorical variables to factors
metadataSubset$tumor <- as.numeric(grepl('tumor', metadataSubset$sampleid, ignore.case=T))
#Swapping lesion type for sample RK169
metadataSubset["RK169-tumor-XY","tumor"] <- 0
metadataSubset["RK169-adjacent-XY","tumor"] <- 1
#Changing rownames to match swapped lesion type
rownames(metadataSubset)[rownames(metadataSubset)=="RK169-tumor-XY"] <- "RK169_adjacent-XY"
rownames(metadataSubset)[rownames(metadataSubset)=="RK169-adjacent-XY"] <- "RK169_tumor-XY"
rownames(metadataSubset)[rownames(metadataSubset)=="RK169_adjacent-XY"] <- "RK169-adjacent-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK169-tumor-XY"] <- "RK169_adjacent-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK169-adjacent-XY"] <- "RK169_tumor-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK169_adjacent-XY"] <- "RK169-adjacent-XY"
#Swapping lesion type for sample RK065
metadataSubset["RK065-tumor-XX","tumor"] <- 0
metadataSubset["RK065-adjacent-XX","tumor"] <- 1
#Changing rownames in metadata to match swapped lesion type
rownames(metadataSubset)[rownames(metadataSubset)=="RK065-tumor-XY"] <- "RK065_adjacent-XY"
rownames(metadataSubset)[rownames(metadataSubset)=="RK065-adjacent-XY"] <- "RK065_tumor-XY"
rownames(metadataSubset)[rownames(metadataSubset)=="RK065_adjacent-XY"] <- "RK065-adjacent-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK065-tumor-XY"] <- "RK065_adjacent-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK065-adjacent-XY"] <- "RK065_tumor-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK065_adjacent-XY"] <- "RK065-adjacent-XY"
metadataSubset$gender_tissue <- paste(metadataSubset$Gender, metadataSubset$tumor, sep="_")
metadataSubset$gender_tissue_viral <- paste(metadataSubset$gender_tissue, metadataSubset$Virus_infection, sep="_")
metadataSubset$library_type <- metadataSubset$strandedness
metadataSubset$library_type <- factor(metadataSubset$library_type)
metadataSubset$tumor <- factor(metadataSubset$tumor)
metadataSubset$Ta <- factor(metadataSubset$Ta)
metadataSubset$Portal_vein_invasion <- factor(metadataSubset$Portal_vein_invasion)
metadataSubset$Hepatic_vein_invasion <- factor(metadataSubset$Hepatic_vein_invasion)
metadataSubset$Bile_duct_invasion <- factor(metadataSubset$Bile_duct_invasion)
metadataSubset$Liver_fibrosisc <- factor(metadataSubset$Liver_fibrosisc)
metadataSubset$Prognosis <- factor(metadataSubset$Prognosis)
# Creating the DGEList object
dge <- DGEList(counts=tumorAdjacentExpSubset, genes=genes)
colnames(dge) <- colnames(tumorAdjacentExpSubset)
dge$samples$sex <- metadataSubset$Gender
dge$samples$viral <- factor(metadataSubset$Virus_infection)
dge$samples$ID <- metadataSubset$ID
dge$samples$tumor <- metadataSubset$tumor
dge$samples$gender_tissue <- metadataSubset$gender_tissue
dge$samples$gender_tissue_viral <- metadataSubset$gender_tissue_viral
dge$samples$library_type <- metadataSubset$library_type
dge$samples$edmonson_grade <- metadataSubset$Edmondson_grade
dge$samples$Ta <- metadataSubset$Ta
dge$samples$survival <- metadataSubset$Overall_survival_month
# Inspecting the N of samples in each group
table(dge$samples$gender_tissue_viral)
# ======================================
# Filtering expression data
# ======================================
# Keeping genes that have a mean FPKM of at least 0.5 in at least one of the groups under investigation
fpkm <- rpkm(dge, gene.length=dge$genes$length)
M_1_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_1_HBV")],1,mean,na.rm=TRUE)
M_0_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_0_HBV")],1,mean,na.rm=TRUE)
M_1_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_1_HCV")],1,mean,na.rm=TRUE)
M_0_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_0_HCV")],1,mean,na.rm=TRUE)
F_1_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_1_HBV")],1,mean,na.rm=TRUE)
F_0_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_0_HBV")],1,mean,na.rm=TRUE)
F_1_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_1_HCV")],1,mean,na.rm=TRUE)
F_0_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_0_HCV")],1,mean,na.rm=TRUE)
keep <- (M_1_HBV_mean_fpkm > 0.5 | M_0_HBV_mean_fpkm > 0.5 |
M_1_HCV_mean_fpkm > 0.5 | M_0_HCV_mean_fpkm > 0.5 |
F_1_HBV_mean_fpkm > 0.5 | F_0_HBV_mean_fpkm > 0.5 |
F_1_HCV_mean_fpkm > 0.5 | F_0_HCV_mean_fpkm > 0.5 )
dge <- dge[keep,,keep.lib.sizes=FALSE]
# N of genes retained after filtering
dim(dge$genes)
# Pulling X degenerate expression data from dge variable into individual variables
dge <- as.data.frame(dge)
gene0 <- dge[which(dge$gene_name=="KDM5D"),]
gene1 <- dge[which(dge$gene_name=="DDX3Y"),]
gene2 <- dge[which(dge$gene_name=="EIF1AY"),]
gene3 <- dge[which(dge$gene_name=="TXLNGY"),]
gene4 <- dge[which(dge$gene_name=="TSPY1"),]
#gene5 <- dge[which(dge$gene_name=="AR"),]
#gene6 <- dge[which(dge$gene_name=="XIST"),]
#creating data frame of all genes we will be working with
xDegenerateExpression<- rbind(gene0,gene1,gene2,gene3,gene4)
#making the gene names the rownames
rownames(xDegenerateExpression) <- xDegenerateExpression$gene_name
#subsetting out all columns that are not expression data
xDegenerateExpression <- subset(xDegenerateExpression, select = -c(chr, start, end, TXNAME, GENEID, length,gene_name))
xDegenerateExpression <- as.data.frame(t(xDegenerateExpression))
#subsetting by tumor
Tumor_expressionData <- xDegenerateExpression[grepl("tumor",rownames(xDegenerateExpression),fixed=TRUE),]
Tumor_expressionData <- as.data.frame(Tumor_expressionData)
#Creating Names column
for (i in 1:dim(Tumor_expressionData)[1]) {
Tumor_expressionData$Names[i] = substr(row.names(Tumor_expressionData)[i],3,5)
}
test <- Tumor_expressionData[1,]
test <- t(test)
test <- as.data.frame(test)
test$gene <- rownames(test)
colnames(test) <- c("RK002","gene")
ggplot(test, aes(x=gene, y=RK002)) + geom_line() + geom_point()
#plot(Tumor_expressionData)
#creating scatterplot
#ggplot(gene0,aes(x=, y=Expression)) + geom_point()
View(Tumor_expressionData)
View(test)
View(Tumor_expressionData)
vector(mode="numeric", length=2)
Tumor_expressionData$group<- vector(mode="numeric", length=length(Tumor_expressionData))
Tumor_expressionData$group<- vector(mode="numeric", length=149)
View(Tumor_expressionData)
#test <- Tumor_expressionData[1,]
#test <- t(test)
#test <- as.data.frame(test)
#test$gene <- rownames(test)
#colnames(test) <- c("RK002","gene")
#ggplot(test, aes(x=gene, y=RK002)) + geom_line() + geom_point()
ggplot(Tumor_expressionData,aes(x=gene, y=Names, group=group)) +geom_line() + geom_point()
# Pulling X degenerate expression data from dge variable into individual variables
dge <- as.data.frame(dge)
gene0 <- dge[which(dge$gene_name=="KDM5D"),]
gene1 <- dge[which(dge$gene_name=="DDX3Y"),]
gene2 <- dge[which(dge$gene_name=="EIF1AY"),]
gene3 <- dge[which(dge$gene_name=="TXLNGY"),]
gene4 <- dge[which(dge$gene_name=="TSPY1"),]
#gene5 <- dge[which(dge$gene_name=="AR"),]
#gene6 <- dge[which(dge$gene_name=="XIST"),]
#creating data frame of all genes we will be working with
xDegenerateExpression<- rbind(gene0,gene1,gene2,gene3,gene4)
#making the gene names the rownames
rownames(xDegenerateExpression) <- xDegenerateExpression$gene_name
#subsetting out all columns that are not expression data
xDegenerateExpression <- subset(xDegenerateExpression, select = -c(chr, start, end, TXNAME, GENEID, length,gene_name))
xDegenerateExpression <- as.data.frame(t(xDegenerateExpression))
#subsetting by tumor
Tumor_expressionData <- xDegenerateExpression[grepl("tumor",rownames(xDegenerateExpression),fixed=TRUE),]
Tumor_expressionData <- as.data.frame(Tumor_expressionData)
Tumor_expressionData<- t(Tumor_expressionData)
Tumor_expressionData <- as.data.frame(Tumor_expressionData)
#Creating Names column
for (i in 1:dim(Tumor_expressionData)[1]) {
Tumor_expressionData$Names[i] = substr(row.names(Tumor_expressionData)[i],3,5)
}
Tumor_expressionData$group<- vector(mode="numeric", length=149)
Tumor_expressionData$group<- vector(mode="numeric", length=6)
Tumor_expressionData$group<- vector(mode="numeric", length=6)
Tumor_expressionData$group<- vector(mode="numeric", length=5)
# Pulling X degenerate expression data from dge variable into individual variables
dge <- as.data.frame(dge)
gene0 <- dge[which(dge$gene_name=="KDM5D"),]
gene1 <- dge[which(dge$gene_name=="DDX3Y"),]
gene2 <- dge[which(dge$gene_name=="EIF1AY"),]
gene3 <- dge[which(dge$gene_name=="TXLNGY"),]
gene4 <- dge[which(dge$gene_name=="TSPY1"),]
#gene5 <- dge[which(dge$gene_name=="AR"),]
#gene6 <- dge[which(dge$gene_name=="XIST"),]
#creating data frame of all genes we will be working with
xDegenerateExpression<- rbind(gene0,gene1,gene2,gene3,gene4)
#making the gene names the rownames
rownames(xDegenerateExpression) <- xDegenerateExpression$gene_name
#subsetting out all columns that are not expression data
xDegenerateExpression <- subset(xDegenerateExpression, select = -c(chr, start, end, TXNAME, GENEID, length,gene_name))
xDegenerateExpression <- as.data.frame(t(xDegenerateExpression))
#subsetting by tumor
Tumor_expressionData <- xDegenerateExpression[grepl("tumor",rownames(xDegenerateExpression),fixed=TRUE),]
Tumor_expressionData <- as.data.frame(Tumor_expressionData)
#Tumor_expressionData<- t(Tumor_expressionData)
#Tumor_expressionData <- as.data.frame(Tumor_expressionData)
#Creating Names column
for (i in 1:dim(Tumor_expressionData)[1]) {
Tumor_expressionData$Names[i] = substr(row.names(Tumor_expressionData)[i],3,5)
}
Tumor_expressionData$group<- vector(mode="numeric", length=149)
Tumor_expressionData<- t(Tumor_expressionData)
Tumor_expressionData <- as.data.frame(Tumor_expressionData)
View(Tumor_expressionData)
# Pulling X degenerate expression data from dge variable into individual variables
dge <- as.data.frame(dge)
gene0 <- dge[which(dge$gene_name=="KDM5D"),]
gene1 <- dge[which(dge$gene_name=="DDX3Y"),]
gene2 <- dge[which(dge$gene_name=="EIF1AY"),]
gene3 <- dge[which(dge$gene_name=="TXLNGY"),]
gene4 <- dge[which(dge$gene_name=="TSPY1"),]
#gene5 <- dge[which(dge$gene_name=="AR"),]
#gene6 <- dge[which(dge$gene_name=="XIST"),]
#creating data frame of all genes we will be working with
xDegenerateExpression<- rbind(gene0,gene1,gene2,gene3,gene4)
#making the gene names the rownames
rownames(xDegenerateExpression) <- xDegenerateExpression$gene_name
#subsetting out all columns that are not expression data
xDegenerateExpression <- subset(xDegenerateExpression, select = -c(chr, start, end, TXNAME, GENEID, length,gene_name))
xDegenerateExpression <- as.data.frame(t(xDegenerateExpression))
#subsetting by tumor
Tumor_expressionData <- xDegenerateExpression[grepl("tumor",rownames(xDegenerateExpression),fixed=TRUE),]
Tumor_expressionData <- as.data.frame(Tumor_expressionData)
#Tumor_expressionData<- t(Tumor_expressionData)
#Tumor_expressionData <- as.data.frame(Tumor_expressionData)
#Creating Names column
for (i in 1:dim(Tumor_expressionData)[1]) {
Tumor_expressionData$Names[i] = substr(row.names(Tumor_expressionData)[i],3,5)
}
Tumor_expressionData$group<- vector(mode="numeric", length=149)
library(RColorBrewer)
library(matrixStats)
library(ggplot2)
library(edgeR)
library(DESeq2)
library(limma)
library(doParallel)
library(variancePartition)
library(org.Hs.eg.db)
library(clusterProfiler)
library(GOSemSim)
library(biomaRt)
library(UpSetR)
library(VennDiagram)
library(ggrepel)
library(dplyr)
library(stringr)
library(forcats)
library(stats)
library(gridExtra)
setwd('~/Desktop/ResearchProjects/LiverCancerProject/DEA_removed_samples')
metadata <- read.table("~/Desktop/ResearchProjects/LiverCancerProject/Metadata/metadata_for_de.csv", row.names=1,header=TRUE, sep=",") #changing the name of the file
tumorAdjacentExp <- read.table("~/Desktop/ResearchProjects/LiverCancerProject/Metadata/japan_all_samples_salmon_expression_counts.txt", row.names = 1, header=TRUE) #changing the name of the file
colnames(tumorAdjacentExp) <- gsub("\\.", "-", colnames(tumorAdjacentExp)) #changing the column names
# Importing gene annotations
#genes <- read.table("gencode.v25.chr_patch_hapl_scaff.annotation.bed", header=FALSE, sep="\t")
genes <- read.table("~/Desktop/ResearchProjects/LiverCancerProject/Metadata/gencodeTranscripts.txt", header=TRUE, sep="\t")
genes <- data.frame(genes)
tumorAdjacentExp <- tumorAdjacentExp[rownames(tumorAdjacentExp) %in% genes$GENEID ,]
genes <- genes[match(rownames(tumorAdjacentExp), genes$GENEID),]
# Calculating gene length, this is needed for calculating the FPKM values
genes$length <- with(genes, end - start)
# Removing Samples due to low quality
metadata <- metadata[!(metadata$ID == "RK023") , ]
metadata <- metadata[!(metadata$ID == "RK106") , ]
metadata <- metadata[!(metadata$ID == "RK113") , ]
metadata <- metadata[!(metadata$ID == "RK135") , ]
metadata <- metadata[!(metadata$ID == "RK105") , ]
metadata <- metadata[!(metadata$ID == "RK116") , ]
metadata <- metadata[!(metadata$ID == "RK066") , ]
metadata <- metadata[!(metadata$ID == "RK096") , ]
#Removing both and NBNC samples
metadata <- metadata[!(metadata$Virus_infection == "NBNC"), ]
metadata <- metadata[!(metadata$Virus_infection == "both"), ]
# Subsetting and ordering metadata to match the count matrix
tumorAdjacentExpSubset <- tumorAdjacentExp[,colnames(tumorAdjacentExp) %in% metadata$sampleid]
metadataSubset <- metadata[metadata$sampleid %in% colnames(tumorAdjacentExpSubset),]
metadataSubset <- metadataSubset[match(colnames(tumorAdjacentExpSubset), metadataSubset$sampleid),]
rownames(metadataSubset) <- metadataSubset$sampleid
# Adding tissue type, converting categorical variables to factors
metadataSubset$tumor <- as.numeric(grepl('tumor', metadataSubset$sampleid, ignore.case=T))
#Swapping lesion type for sample RK169
metadataSubset["RK169-tumor-XY","tumor"] <- 0
metadataSubset["RK169-adjacent-XY","tumor"] <- 1
#Changing rownames to match swapped lesion type
rownames(metadataSubset)[rownames(metadataSubset)=="RK169-tumor-XY"] <- "RK169_adjacent-XY"
rownames(metadataSubset)[rownames(metadataSubset)=="RK169-adjacent-XY"] <- "RK169_tumor-XY"
rownames(metadataSubset)[rownames(metadataSubset)=="RK169_adjacent-XY"] <- "RK169-adjacent-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK169-tumor-XY"] <- "RK169_adjacent-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK169-adjacent-XY"] <- "RK169_tumor-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK169_adjacent-XY"] <- "RK169-adjacent-XY"
#Swapping lesion type for sample RK065
metadataSubset["RK065-tumor-XX","tumor"] <- 0
metadataSubset["RK065-adjacent-XX","tumor"] <- 1
#Changing rownames in metadata to match swapped lesion type
rownames(metadataSubset)[rownames(metadataSubset)=="RK065-tumor-XY"] <- "RK065_adjacent-XY"
rownames(metadataSubset)[rownames(metadataSubset)=="RK065-adjacent-XY"] <- "RK065_tumor-XY"
rownames(metadataSubset)[rownames(metadataSubset)=="RK065_adjacent-XY"] <- "RK065-adjacent-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK065-tumor-XY"] <- "RK065_adjacent-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK065-adjacent-XY"] <- "RK065_tumor-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK065_adjacent-XY"] <- "RK065-adjacent-XY"
metadataSubset$gender_tissue <- paste(metadataSubset$Gender, metadataSubset$tumor, sep="_")
metadataSubset$gender_tissue_viral <- paste(metadataSubset$gender_tissue, metadataSubset$Virus_infection, sep="_")
metadataSubset$library_type <- metadataSubset$strandedness
metadataSubset$library_type <- factor(metadataSubset$library_type)
metadataSubset$tumor <- factor(metadataSubset$tumor)
metadataSubset$Ta <- factor(metadataSubset$Ta)
metadataSubset$Portal_vein_invasion <- factor(metadataSubset$Portal_vein_invasion)
metadataSubset$Hepatic_vein_invasion <- factor(metadataSubset$Hepatic_vein_invasion)
metadataSubset$Bile_duct_invasion <- factor(metadataSubset$Bile_duct_invasion)
metadataSubset$Liver_fibrosisc <- factor(metadataSubset$Liver_fibrosisc)
metadataSubset$Prognosis <- factor(metadataSubset$Prognosis)
# Creating the DGEList object
dge <- DGEList(counts=tumorAdjacentExpSubset, genes=genes)
colnames(dge) <- colnames(tumorAdjacentExpSubset)
dge$samples$sex <- metadataSubset$Gender
dge$samples$viral <- factor(metadataSubset$Virus_infection)
dge$samples$ID <- metadataSubset$ID
dge$samples$tumor <- metadataSubset$tumor
dge$samples$gender_tissue <- metadataSubset$gender_tissue
dge$samples$gender_tissue_viral <- metadataSubset$gender_tissue_viral
dge$samples$library_type <- metadataSubset$library_type
dge$samples$edmonson_grade <- metadataSubset$Edmondson_grade
dge$samples$Ta <- metadataSubset$Ta
dge$samples$survival <- metadataSubset$Overall_survival_month
# Inspecting the N of samples in each group
table(dge$samples$gender_tissue_viral)
# ======================================
# Filtering expression data
# ======================================
# Keeping genes that have a mean FPKM of at least 0.5 in at least one of the groups under investigation
fpkm <- rpkm(dge, gene.length=dge$genes$length)
M_1_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_1_HBV")],1,mean,na.rm=TRUE)
M_0_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_0_HBV")],1,mean,na.rm=TRUE)
M_1_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_1_HCV")],1,mean,na.rm=TRUE)
M_0_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_0_HCV")],1,mean,na.rm=TRUE)
F_1_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_1_HBV")],1,mean,na.rm=TRUE)
F_0_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_0_HBV")],1,mean,na.rm=TRUE)
F_1_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_1_HCV")],1,mean,na.rm=TRUE)
F_0_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_0_HCV")],1,mean,na.rm=TRUE)
keep <- (M_1_HBV_mean_fpkm > 0.5 | M_0_HBV_mean_fpkm > 0.5 |
M_1_HCV_mean_fpkm > 0.5 | M_0_HCV_mean_fpkm > 0.5 |
F_1_HBV_mean_fpkm > 0.5 | F_0_HBV_mean_fpkm > 0.5 |
F_1_HCV_mean_fpkm > 0.5 | F_0_HCV_mean_fpkm > 0.5 )
dge <- dge[keep,,keep.lib.sizes=FALSE]
# N of genes retained after filtering
dim(dge$genes)
# Pulling X degenerate expression data from dge variable into individual variables
dge <- as.data.frame(dge)
gene0 <- dge[which(dge$gene_name=="KDM5D"),]
gene1 <- dge[which(dge$gene_name=="DDX3Y"),]
gene2 <- dge[which(dge$gene_name=="EIF1AY"),]
gene3 <- dge[which(dge$gene_name=="TXLNGY"),]
gene4 <- dge[which(dge$gene_name=="TSPY1"),]
#gene5 <- dge[which(dge$gene_name=="AR"),]
#gene6 <- dge[which(dge$gene_name=="XIST"),]
#creating data frame of all genes we will be working with
xDegenerateExpression<- rbind(gene0,gene1,gene2,gene3,gene4)
#making the gene names the rownames
rownames(xDegenerateExpression) <- xDegenerateExpression$gene_name
#subsetting out all columns that are not expression data
xDegenerateExpression <- subset(xDegenerateExpression, select = -c(chr, start, end, TXNAME, GENEID, length,gene_name))
xDegenerateExpression <- as.data.frame(t(xDegenerateExpression))
#subsetting by tumor
Tumor_expressionData <- xDegenerateExpression[grepl("tumor",rownames(xDegenerateExpression),fixed=TRUE),]
Tumor_expressionData <- as.data.frame(Tumor_expressionData)
#Tumor_expressionData<- t(Tumor_expressionData)
#Tumor_expressionData <- as.data.frame(Tumor_expressionData)
#Creating Names column
for (i in 1:dim(Tumor_expressionData)[1]) {
Tumor_expressionData$Names[i] = substr(row.names(Tumor_expressionData)[i],3,5)
}
Tumor_expressionData$group<- vector(mode="numeric", length=149)
#test <- Tumor_expressionData[1,]
#test <- t(test)
#test <- as.data.frame(test)
#test$gene <- rownames(test)
#colnames(test) <- c("RK002","gene")
#ggplot(test, aes(x=gene, y=RK002)) + geom_line() + geom_point()
ggplot(Tumor_expressionData,aes(x=gene, y=Names, group=group)) +geom_line() + geom_point()
Tumor_expressionData$group<- vector(mode="numeric", [1:149])
Tumor_expressionData$group<- vector(mode="numeric", 1:149)
Tumor_expressionData$group<- 1:149
View(gene0)
View(gene1)
View(gene2)
View(gene3)
gene01<- t(gene0)
gene01<- as.data.frame(gen01)
gene01<- as.data.frame(gene01)
View(gene01)
View(gene01)
rm(gene01x)
rm(gene01)
View(gene0)
View(gene1)
View(gene2)
View(xDegenerateExpression)
plot(xDegenerateExpression)
plot(xDegenerateExpression$KDM5D)
plot(xDegenerateExpression$DDX3Y)
plot(xDegenerateExpression[1,])
t(xDegenerateExpression)
library(RColorBrewer)
library(matrixStats)
library(ggplot2)
library(edgeR)
library(DESeq2)
library(limma)
library(doParallel)
library(variancePartition)
library(org.Hs.eg.db)
library(clusterProfiler)
library(GOSemSim)
library(biomaRt)
library(UpSetR)
library(VennDiagram)
library(ggrepel)
library(dplyr)
library(stringr)
library(forcats)
library(stats)
library(gridExtra)
setwd('~/Desktop/ResearchProjects/LiverCancerProject/DEA_removed_samples')
metadata <- read.table("~/Desktop/ResearchProjects/LiverCancerProject/Metadata/metadata_for_de.csv", row.names=1,header=TRUE, sep=",") #changing the name of the file
tumorAdjacentExp <- read.table("~/Desktop/ResearchProjects/LiverCancerProject/Metadata/japan_all_samples_salmon_expression_counts.txt", row.names = 1, header=TRUE) #changing the name of the file
