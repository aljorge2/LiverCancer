Female3F<- nrow(Female[Female$Liver.fibrosisc== "3", ])/42
Female4F<- nrow(Female[Female$Liver.fibrosisc== "4", ])/42
#Histogram data
LiverHist<- as.data.frame(cbind(Males= c(Male0F,Male1F,Male2F,Male3F,Male4F), Females= c(Female0F, Female1F, Female2F,Female3F,Female4F)))
rownames(LiverHist)<- c(0,1,2,3,4)
# Male Liver Fibrosis Histogram
barplot(LiverHist$Females,ylim = c(0,1),
names.arg = c(0, 1, 2, 3, 4),  # X-axis labels
col = "skyblue",            # Bar color
border = "black",           # Bar border color
main = "Female Liver Fibrosis Histogram", # title name
xlab = "Liver Fibrosis Severity",
ylab = "Counts",
space = 0 )
# Female liver fibrosis histogram
barplot(LiverHist$Males,ylim = c(0,1),
names.arg = c(0, 1, 2, 3, 4),  # X-axis labels
col = "skyblue",            # Bar color
border = "black",           # Bar border color
main = "Male Liver Fibrosis Histogram", # title name
xlab = "Liver Fibrosis Severity",
ylab = "Counts",
space = 0 )
#outputting table
LiverFibrosis
#male stage separated by severity
Male1st<- nrow(Male[Male$Ta== "1", ])
Male2st<- nrow(Male[Male$Ta== "2", ])
Male3st<- nrow(Male[Male$Ta== "3", ])
Male4st<- nrow(Male[Male$Ta== "4", ])
#female stage separated by severity
Female1st<- nrow(Female[Female$Ta== "1", ])
Female2st<- nrow(Female[Female$Ta== "2", ])
Female3st<- nrow(Female[Female$Ta== "3", ])
Female4st<- nrow(Female[Female$Ta== "4", ])
#counts of tumor stage
TumorStage<- as.data.frame(cbind(Males= c(Male1st,Male2st,Male3st,Male4st), Females= c(Female1st, Female2st, Female3st,Female4st)))
rownames(TumorStage)<- c(1,2,3,4)
# reject null hypothesis
#sums of rows in TumorStage
TumorStageCounts<-c(27,72,42,9)
#add sums of rows to TumorSTage
TumorStage<- cbind(TumorStage,TumorStageCounts)
#sums of columns in TumorStage
StageTotalCounts<-c(108,42,150)
#add sums of column to TumorStage
TumorStage<- rbind(TumorStage,StageTotalCounts)
rownames(TumorStage)<- c("1","2","3","4","Totals")
#calculating expected counts
ExpectedStageCounts<-  as.data.frame(cbind(Males=c((TumorStage[1,3]*TumorStage[5,1])/TumorStage[5,3],(TumorStage[2,3]*TumorStage[5,1])/TumorStage[5,3],(TumorStage[3,3]*TumorStage[5,1])/TumorStage[5,3],(TumorStage[4,3]*TumorStage[5,1])/TumorStage[5,3]), Females=c((TumorStage[1,3]*TumorStage[5,2])/TumorStage[5,3],(TumorStage[2,3]*TumorStage[5,2])/TumorStage[5,3],(TumorStage[3,3]*TumorStage[5,2])/TumorStage[5,3],(TumorStage[4,3]*TumorStage[5,2])/TumorStage[5,3])))
#calculating Chi square statistic
testS<- (TumorStage[1,1]-ExpectedStageCounts[1,1])^2/ExpectedStageCounts[1,1] + (TumorStage[2,1]-ExpectedStageCounts[2,1])^2/ExpectedStageCounts[2,1] +
(TumorStage[3,1]-ExpectedStageCounts[3,1])^2/ExpectedStageCounts[3,1] +
(TumorStage[4,1]-ExpectedStageCounts[4,1])^2/ExpectedStageCounts[4,1] +
(TumorStage[1,2]-ExpectedStageCounts[1,2])^2/ExpectedStageCounts[1,2] +
(TumorStage[2,2]-ExpectedStageCounts[2,2])^2/ExpectedStageCounts[2,2] +
(TumorStage[3,2]-ExpectedStageCounts[3,2])^2/ExpectedStageCounts[3,2] +
(TumorStage[4,2]-ExpectedStageCounts[4,2])^2/ExpectedStageCounts[4,2]
cumulative_probability <- 1- pchisq(testS, 3)
print(cumulative_probability)
#the statistic from the chi distribution table yields a critical statistic of 7.815 based on a alpha 0.05 and 3 degrees of freedom which is greater than 6.177. Because the critical statistic is greater than our chi square value we cannot reject the null hypothesis that the proportion of males and females with each tumor stage are the same.
#proportions similar
#male stage separated by severity
Male1st<- nrow(Male[Male$Ta== "1", ])
Male2st<- nrow(Male[Male$Ta== "2", ])
Male3st<- nrow(Male[Male$Ta== "3", ])
Male4st<- nrow(Male[Male$Ta== "4", ])
#female stage separated by severity
Female1st<- nrow(Female[Female$Ta== "1", ])
Female2st<- nrow(Female[Female$Ta== "2", ])
Female3st<- nrow(Female[Female$Ta== "3", ])
Female4st<- nrow(Female[Female$Ta== "4", ])
#counts of tumor stage
TumorHist<- as.data.frame(cbind(Males= c(Male1st,Male2st,Male3st,Male4st), Females= c(Female1st, Female2st, Female3st,Female4st)))
rownames(TumorHist)<- c(1,2,3,4)
# Male tumor stage histogram
barplot(TumorHist$Males, ylim = c(0,50),
names.arg = c(1, 2, 3, 4),  # X-axis labels
col = "skyblue",            # Bar color
border = "black",           # Bar border color
main = "Male Tumor Stage Histogram", # title name
xlab = "Tumor Stage",
ylab = "Counts",
space = 0 )
# Female tumor stage histogram
barplot(TumorHist$Females, ylim = c(0,50),
names.arg = c(1, 2, 3, 4),  # X-axis labels
col = "skyblue",            # Bar color
border = "black",           # Bar border color
main = "Female Tumor Stage Histogram", # title name
xlab = "Tumor Stage",
ylab = "Counts",
space = 0 )
TumorHist <- t(TumorHist)
TumorHist <- as.matrix(TumorHist)
barplot(TumorHist, beside = TRUE, ylim = c(0,50), col = c("#FFC20A", "#40B0A6"), names.arg = c(1,2,3,4),
legend.text = c("Males", "Females"), xlab = "Tumor Stage", ylab = "Counts",
main = "Tumor Stage Paired Bar Plot")
TumorStage
# Sample data
data <- data.frame(
Sex = rep(c("Males", "Females"), each = 4),
Category = rep(c("Stage 1", "Stage 2", "Stage 3", "Stage 4"), times = 2),
Percentage = c(17, 48, 36, 7, 10, 24, 6, 2)
)
custom_colors <- c("#40B0A6", "#FFC20A")
# Calculate the percentages within each group
data <- transform(data, Percentage = Percentage / tapply(Percentage, Sex, sum)[Sex] * 100)
# Create a percentage paired bar graph
ggplot(data, aes(x = Category, y = Percentage, fill = Sex, group = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Percentage Bar Graph Tumor Stage",
x = "Tumor Stage",
y = "Percentage") +geom_text(aes(label = sprintf("%.1f%%", Percentage)),
position = position_dodge(width = 0.9),    # Adjust the width as needed
vjust = -0.5, hjust = 0.5, size = 3) +  scale_fill_manual(values = custom_colors) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
theme_minimal()
#changing cells to work with CHI square test
#Male["Edmondson.grade"][Male["Edmondson.grade"] == "2~3"] <- "2.5"
#Male["Edmondson.grade"][Male["Edmondson.grade"] == "1~2"] <- "1.5"
Male[is.na(Male)] <-0
#Female["Edmondson.grade"][Female["Edmondson.grade"] == "2~3"] <- "2.5"
#Female["Edmondson.grade"][Female["Edmondson.grade"] == "1~2"] <- "1.5"
Female[is.na(Female)] <-0
#male grade separated by severity
MaleEg0<- nrow(Male[Male$Edmondson.grade=="0", ])
MaleEg1<- nrow(Male[Male$Edmondson.grade=="1", ])
MaleEg1.5<- nrow(Male[Male$Edmondson.grade=="1~2", ])
MaleEg2<- nrow(Male[Male$Edmondson.grade=="2", ])
MaleEg2.5<- nrow(Male[Male$Edmondson.grade=="2~3", ])
MaleEg3<- nrow(Male[Male$Edmondson.grade=="3", ])
MaleEg4<- nrow(Male[Male$Edmondson.grade=="4", ])
#female grade separated by severity
FemaleEg0<- nrow(Female[Female$Edmondson.grade=="0", ])
FemaleEg1<- nrow(Female[Female$Edmondson.grade=="1", ])
FemaleEg1.5<- nrow(Female[Female$Edmondson.grade=="1~2", ])
FemaleEg2<- nrow(Female[Female$Edmondson.grade=="2", ])
FemaleEg2.5<- nrow(Female[Female$Edmondson.grade=="2~3", ])
FemaleEg3<- nrow(Female[Female$Edmondson.grade=="3", ])
FemaleEg4<- nrow(Female[Female$Edmondson.grade=="4", ])
#counts of Edmonson grade
EdmonsonGrade<- as.data.frame(cbind(Males= c(MaleEg0,MaleEg1,MaleEg1.5,MaleEg2,MaleEg2.5,MaleEg3,MaleEg4), Females= c(FemaleEg0,FemaleEg1, FemaleEg1.5, FemaleEg2,FemaleEg2.5,FemaleEg3,FemaleEg4)))
rownames(EdmonsonGrade)<- c(0,1,1.5,2,2.5,3,4)
#male grade separated by severity
MaleEg0<- nrow(Male[Male$Edmondson.grade=="0", ])
MaleEg1<- nrow(Male[Male$Edmondson.grade=="1", ])
MaleEg1.5<- nrow(Male[Male$Edmondson.grade=="1~2", ])
MaleEg2<- nrow(Male[Male$Edmondson.grade=="2", ])
MaleEg2.5<- nrow(Male[Male$Edmondson.grade=="2~3", ])
MaleEg3<- nrow(Male[Male$Edmondson.grade=="3", ])
MaleEg4<- nrow(Male[Male$Edmondson.grade=="4", ])
#female grade separated by severity
FemaleEg0<- nrow(Female[Female$Edmondson.grade=="0", ])
FemaleEg1<- nrow(Female[Female$Edmondson.grade=="1", ])
FemaleEg1.5<- nrow(Female[Female$Edmondson.grade=="1~2", ])
FemaleEg2<- nrow(Female[Female$Edmondson.grade=="2", ])
FemaleEg2.5<- nrow(Female[Female$Edmondson.grade=="2~3", ])
FemaleEg3<- nrow(Female[Female$Edmondson.grade=="3", ])
FemaleEg4<- nrow(Female[Female$Edmondson.grade=="4", ])
#counts of Edmonson grade
EdmonsonHist<- as.data.frame(cbind(Males= c(MaleEg0,MaleEg1,MaleEg1.5,MaleEg2,MaleEg2.5,MaleEg3,MaleEg4), Females= c(FemaleEg0,FemaleEg1, FemaleEg1.5, FemaleEg2,FemaleEg2.5,FemaleEg3,FemaleEg4)))
rownames(EdmonsonHist)<- c(0,1,1.5,2,2.5,3,4)
# Male tumor stage histogram
barplot(EdmonsonHist$Males,
names.arg = c(0,1,1.5,2,2.5,3,4),  # X-axis labels
col = "skyblue",            # Bar color
border = "black",           # Bar border color
main = "Male Edmondson Grade Histogram", # title name
xlab = "Grade ",
ylab = "Counts",
space = 0 )
# Female tumor stage histogram
barplot(EdmonsonHist$Females,
names.arg = c(0,1,1.5,2,2.5,3,4),  # X-axis labels
col = "skyblue",            # Bar color
border = "black",           # Bar border color
main = "Female Edmondson Grade Histogram", # title name
xlab = "Grade",
ylab = "Counts",
space = 0 )
#sums of rows in EdmonsonGrade
EdmonsonGradeCounts<-c(1,14,8,88,23,16,1)
#add sums of rows to EdmonsonGrade
EdmonsonGrade<- cbind(EdmonsonGrade,EdmonsonGradeCounts)
#sums of columns in EdmonsonGrade
GradeTotalCounts<-c(108,42,150)
#add sums of column to EdmonsonGrade
EdmonsonGrade<- rbind(EdmonsonGrade,GradeTotalCounts)
rownames(EdmonsonGrade)<- c("0","1","1.5","2","2.5","3","4","Totals")
#calculating expected counts
ExpectedEdmonson<- as.data.frame(cbind(Males=c((EdmonsonGrade[1,3]*EdmonsonGrade[8,1])/EdmonsonGrade[8,3],(EdmonsonGrade[2,3]*EdmonsonGrade[8,1])/EdmonsonGrade[8,3],(EdmonsonGrade[3,3]*EdmonsonGrade[8,1])/EdmonsonGrade[8,3],(EdmonsonGrade[4,3]*EdmonsonGrade[8,1])/EdmonsonGrade[8,3],(EdmonsonGrade[5,3]*EdmonsonGrade[8,1])/EdmonsonGrade[8,3],(EdmonsonGrade[6,3]*EdmonsonGrade[8,1])/EdmonsonGrade[8,3],(EdmonsonGrade[7,3]*EdmonsonGrade[8,1])/EdmonsonGrade[8,3]), Females=c((EdmonsonGrade[1,3]*EdmonsonGrade[8,2])/EdmonsonGrade[8,3],(EdmonsonGrade[2,3]*EdmonsonGrade[8,2])/EdmonsonGrade[8,3],(EdmonsonGrade[3,3]*EdmonsonGrade[8,2])/EdmonsonGrade[8,3],(EdmonsonGrade[4,3]*EdmonsonGrade[8,2])/EdmonsonGrade[8,3],(EdmonsonGrade[5,3]*EdmonsonGrade[8,2])/EdmonsonGrade[8,3],(EdmonsonGrade[6,3]*EdmonsonGrade[8,2])/EdmonsonGrade[8,3],(EdmonsonGrade[7,3]*EdmonsonGrade[8,2])/EdmonsonGrade[8,3])))
#calculating CHI squared statistic
(EdmonsonGrade[1,1]-ExpectedEdmonson[1,1])^2/ExpectedEdmonson[1,1] +
(EdmonsonGrade[2,1]-ExpectedEdmonson[2,1])^2/ExpectedEdmonson[2,1] +
(EdmonsonGrade[3,1]-ExpectedEdmonson[3,1])^2/ExpectedEdmonson[3,1] +
(EdmonsonGrade[4,1]-ExpectedEdmonson[4,1])^2/ExpectedEdmonson[4,1] +
(EdmonsonGrade[5,1]-ExpectedEdmonson[5,1])^2/ExpectedEdmonson[5,1] +
(EdmonsonGrade[6,1]-ExpectedEdmonson[6,1])^2/ExpectedEdmonson[6,1] +
(EdmonsonGrade[7,1]-ExpectedEdmonson[7,1])^2/ExpectedEdmonson[7,1] +
(EdmonsonGrade[1,2]-ExpectedEdmonson[1,2])^2/ExpectedEdmonson[1,2] +
(EdmonsonGrade[2,2]-ExpectedEdmonson[2,2])^2/ExpectedEdmonson[2,2] +
(EdmonsonGrade[3,2]-ExpectedEdmonson[3,2])^2/ExpectedEdmonson[3,2] +
(EdmonsonGrade[4,2]-ExpectedEdmonson[4,2])^2/ExpectedEdmonson[4,2] +
(EdmonsonGrade[5,2]-ExpectedEdmonson[5,2])^2/ExpectedEdmonson[5,2] +
(EdmonsonGrade[6,2]-ExpectedEdmonson[6,2])^2/ExpectedEdmonson[6,2] +
(EdmonsonGrade[7,2]-ExpectedEdmonson[7,2])^2/ExpectedEdmonson[7,2]
#the statistic from the chi distribution table yields a critical statistic of 12.592 based on a alpha 0.05 and 6 degrees of freedom which is greater than 2.647. Because the critical statistic is less than our chi square value we cannot reject the null hypothesis that the proportion of males and females with each Edmondson grade are the same.
#proportions the same
EdmonsonGrade
#male prognosis separated by severity?
MaleProg0<- nrow(Male[Male$Prognosisf=="0",])
MaleProg1<- nrow(Male[Male$Prognosisf=="1",])
MaleProg2<- nrow(Male[Male$Prognosisf=="2",])
MaleProg3<- nrow(Male[Male$Prognosisf=="3",])
#female prognosis separated by severity?
FemaleProg0<- nrow(Female[Female$Prognosisf=="0",])
FemaleProg1<- nrow(Female[Female$Prognosisf=="1",])
FemaleProg2<- nrow(Female[Female$Prognosisf=="2",])
FemaleProg3<- nrow(Female[Female$Prognosisf=="3",])
#counts of Prognosis
Prognosis<- as.data.frame(cbind(Males= c(MaleProg0,MaleProg1,MaleProg2,MaleProg3), Females= c(FemaleProg0, FemaleProg1,FemaleProg2,FemaleProg3)))
rownames(Prognosis)<- c(0,1,2,3)
chisq.test(EdmonsonGrade)
#sums of rows in Prognosis
PrognosisCounts<-c(124,21,3,2)
#add sums of rows to Prognosis
Prognosis<- cbind(Prognosis,PrognosisCounts)
#sums of columns in Prognosis
PrognosisTotalCounts<-c(108,42,150)
#add sums of column to Prognosis
Prognosis<- rbind(Prognosis,PrognosisTotalCounts)
rownames(Prognosis)<- c("0","1","2","3","Totals")
ExpectedPrognosis<- as.data.frame(cbind(Males=c((Prognosis[1,3]*Prognosis[5,1])/Prognosis[5,3],(Prognosis[2,3]*Prognosis[5,1])/Prognosis[5,3],(Prognosis[3,3]*Prognosis[5,1])/Prognosis[5,3],(Prognosis[4,3]*Prognosis[5,1])/Prognosis[5,3]),Females=c((Prognosis[1,3]*Prognosis[5,2])/Prognosis[5,3],(Prognosis[2,3]*Prognosis[5,2])/Prognosis[5,3],(Prognosis[3,3]*Prognosis[5,2])/Prognosis[5,3],(Prognosis[4,3]*Prognosis[5,2])/Prognosis[5,3])))
(Prognosis[1,1]-ExpectedPrognosis[1,1])^2/ExpectedPrognosis[1,1] +
(Prognosis[2,1]-ExpectedPrognosis[2,1])^2/ExpectedPrognosis[2,1] +
(Prognosis[3,1]-ExpectedPrognosis[3,1])^2/ExpectedPrognosis[3,1] +
(Prognosis[4,1]-ExpectedPrognosis[4,1])^2/ExpectedPrognosis[4,1] +
(Prognosis[1,2]-ExpectedPrognosis[1,2])^2/ExpectedPrognosis[1,2] +
(Prognosis[2,2]-ExpectedPrognosis[2,2])^2/ExpectedPrognosis[2,2] +
(Prognosis[3,2]-ExpectedPrognosis[3,2])^2/ExpectedPrognosis[3,2] +
(Prognosis[4,2]-ExpectedPrognosis[4,2])^2/ExpectedPrognosis[3,2]
#the statistic from the chi distribution table yields a critical statistic of 5.991 based on a alpha 0.05 and 2 degrees of freedom which is greater than 2.647. Because the critical statistic is less than our chi square value we cannot reject the null hypothesis that the proportion of males and females with each Prognosis are the same.
#proportions the same
Prognosis
#subsetting male samples small metadata
MaleSm <- metadataSmall[which(metadataSmall$Gender== "M"),]
#subsetting female samples small metadata
FemaleSm <- metadataSmall[which(metadataSmall$Gender== "F"),]
#proportion of stranded male samples
MaleStranded<- nrow(MaleSm[MaleSm$strandedness=="stranded",])
MaleStranded
#proportion of stranded female samples
FemaleStranded<- nrow(FemaleSm[FemaleSm$strandedness=="stranded",])
FemaleStranded
# two sample z test alpha=0.05
prop.test(x=c(MaleStranded,FemaleStranded), n= c(198,80), p = NULL, alternative = "two.sided", correct = TRUE)
#not significantly different
#proportion of stranded male samples
MaleUnstranded<- nrow(MaleSm[MaleSm$strandedness=="unstranded",])
MaleUnstranded
#proportion of stranded female samples
FemaleUnstranded<- nrow(FemaleSm[FemaleSm$strandedness=="unstranded",])
FemaleUnstranded
# two sample z test alpha=0.05
prop.test(x=c(MaleUnstranded,FemaleUnstranded), n= c(198,80), p = NULL, alternative = "two.sided", correct = TRUE)
#Not significantly different
#counting number of samples without cancer in nodes
MaleNodes<- nrow(Male[Male$N=="0",])
FemaleNodes<- nrow(Female[Female$N=="0",])
#counting number of samples without metastasis
MaleMetastasis<- nrow(Male[Male$M=="0",])
FemaleMetastasis<- nrow(Female[Female$M=="0",])
chisq.test(LiverFibrosis)
table(LiverFibrosis)
View(LiverFibrosis)
print(LiverFibrosis)
LiverFibrosis<- data.frame(Males= c(Male0F,Male1F,Male2F,Male3F,Male4F), Females= c(Female0F, Female1F, Female2F,Female3F,Female4F))
print(LiverFibrosis)
chisq.test(LiverFibrosis)
??chisq.test
??Chisquare
??chisq.test
library(RColorBrewer)
library(matrixStats)
library(ggplot2)
library(edgeR)
library(DESeq2)
library(limma)
library(doParallel)
library(variancePartition)
library(clusterProfiler)
library(GOSemSim)
library(biomaRt)
library(UpSetR)
library(VennDiagram)
library(ggrepel)
library(dplyr)
library(stringr)
library(forcats)
library(stats)
library(gridExtra)
viralPalette <- brewer.pal(8, "Set1")
hbvColor <- viralPalette[1]
hcvColor <- viralPalette[2]
bothColor <- viralPalette[3]
neitherColor <- viralPalette[4]
sexTissuePalette <- brewer.pal(12, "Paired")
maleTumorColor <- sexTissuePalette[4]
maleAdjacentColor <- sexTissuePalette[3]
femaleTumorColor <- sexTissuePalette[6]
femaleAdjacentColor <- sexTissuePalette[5]
metadata <- read.table("~/Desktop/ResearchProjects/LiverCancer/Metadata/metadata_for_de.csv", row.names=1,header=TRUE, sep=",") #changing the name of the file
tumorAdjacentExp <- read.table("~/Desktop/ResearchProjects/LiverCancer/Metadata/japan_all_samples_salmon_expression_counts.txt", row.names = 1, header=TRUE) #changing the name of the file
library(RColorBrewer)
library(matrixStats)
library(ggplot2)
library(edgeR)
library(DESeq2)
library(limma)
library(doParallel)
library(variancePartition)
library(clusterProfiler)
library(GOSemSim)
library(biomaRt)
library(UpSetR)
library(VennDiagram)
library(ggrepel)
library(dplyr)
library(stringr)
library(forcats)
library(stats)
library(gridExtra)
viralPalette <- brewer.pal(8, "Set1")
hbvColor <- viralPalette[1]
hcvColor <- viralPalette[2]
bothColor <- viralPalette[3]
neitherColor <- viralPalette[4]
sexTissuePalette <- brewer.pal(12, "Paired")
maleTumorColor <- sexTissuePalette[4]
maleAdjacentColor <- sexTissuePalette[3]
femaleTumorColor <- sexTissuePalette[6]
femaleAdjacentColor <- sexTissuePalette[5]
metadata <- read.table("~/Desktop/ResearchProjects/LiverCancer/Metadata/metadata_for_de.csv", row.names=1,header=TRUE, sep=",") #changing the name of the file
tumorAdjacentExp <- read.table("~/Desktop/ResearchProjects/LiverCancer/Metadata/japan_all_samples_salmon_expression_counts.txt", row.names = 1, header=TRUE) #changing the name of the file
colnames(tumorAdjacentExp) <- gsub("\\.", "-", colnames(tumorAdjacentExp)) #changing the column names
# Importing gene annotations
#genes <- read.table("gencode.v25.chr_patch_hapl_scaff.annotation.bed", header=FALSE, sep="\t")
genes <- read.table("~/Desktop/ResearchProjects/LiverCancer/Metadata/gencodeTranscripts.txt", header=TRUE, sep="\t")
genes <- data.frame(genes)
tumorAdjacentExp <- tumorAdjacentExp[rownames(tumorAdjacentExp) %in% genes$GENEID ,]
genes <- genes[match(rownames(tumorAdjacentExp), genes$GENEID),]
# Calculating gene length, this is needed for calculating the FPKM values
genes$length <- with(genes, end - start)
# Removing Samples due to low quality
metadata <- metadata[!(metadata$ID == "RK023") , ]
metadata <- metadata[!(metadata$ID == "RK106") , ]
metadata <- metadata[!(metadata$ID == "RK113") , ]
metadata <- metadata[!(metadata$ID == "RK135") , ]
metadata <- metadata[!(metadata$ID == "RK105") , ]
metadata <- metadata[!(metadata$ID == "RK116") , ]
metadata <- metadata[!(metadata$ID == "RK066") , ]
metadata <- metadata[!(metadata$ID == "RK096") , ]
#Removing both and NBNC samples
metadata <- metadata[!(metadata$Virus_infection == "NBNC"), ]
metadata <- metadata[!(metadata$Virus_infection == "both"), ]
# Subsetting and ordering metadata to match the count matrix
tumorAdjacentExpSubset <- tumorAdjacentExp[,colnames(tumorAdjacentExp) %in% metadata$sampleid]
metadataSubset <- metadata[metadata$sampleid %in% colnames(tumorAdjacentExpSubset),]
metadataSubset <- metadataSubset[match(colnames(tumorAdjacentExpSubset), metadataSubset$sampleid),]
rownames(metadataSubset) <- metadataSubset$sampleid
# Adding tissue type, converting categorical variables to factors
metadataSubset$tumor <- as.numeric(grepl('tumor', metadataSubset$sampleid, ignore.case=T))
#Swapping lesion type for sample RK169
metadataSubset["RK169-tumor-XY","tumor"] <- 0
metadataSubset["RK169-adjacent-XY","tumor"] <- 1
#Changing rownames to match swapped lesion type
rownames(metadataSubset)[rownames(metadataSubset)=="RK169-tumor-XY"] <- "RK169_adjacent-XY"
rownames(metadataSubset)[rownames(metadataSubset)=="RK169-adjacent-XY"] <- "RK169_tumor-XY"
rownames(metadataSubset)[rownames(metadataSubset)=="RK169_adjacent-XY"] <- "RK169-adjacent-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK169-tumor-XY"] <- "RK169_adjacent-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK169-adjacent-XY"] <- "RK169_tumor-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK169_adjacent-XY"] <- "RK169-adjacent-XY"
#Swapping lesion type for sample RK065
metadataSubset["RK065-tumor-XX","tumor"] <- 0
metadataSubset["RK065-adjacent-XX","tumor"] <- 1
#Changing rownames in metadata to match swapped lesion type
rownames(metadataSubset)[rownames(metadataSubset)=="RK065-tumor-XY"] <- "RK065_adjacent-XY"
rownames(metadataSubset)[rownames(metadataSubset)=="RK065-adjacent-XY"] <- "RK065_tumor-XY"
rownames(metadataSubset)[rownames(metadataSubset)=="RK065_adjacent-XY"] <- "RK065-adjacent-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK065-tumor-XY"] <- "RK065_adjacent-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK065-adjacent-XY"] <- "RK065_tumor-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK065_adjacent-XY"] <- "RK065-adjacent-XY"
metadataSubset$gender_tissue <- paste(metadataSubset$Gender, metadataSubset$tumor, sep="_")
metadataSubset$gender_tissue_viral <- paste(metadataSubset$gender_tissue, metadataSubset$Virus_infection, sep="_")
metadataSubset$library_type <- metadataSubset$strandedness
metadataSubset$library_type <- factor(metadataSubset$library_type)
metadataSubset$tumor <- factor(metadataSubset$tumor)
metadataSubset$Ta <- factor(metadataSubset$Ta)
metadataSubset$Portal_vein_invasion <- factor(metadataSubset$Portal_vein_invasion)
metadataSubset$Hepatic_vein_invasion <- factor(metadataSubset$Hepatic_vein_invasion)
metadataSubset$Bile_duct_invasion <- factor(metadataSubset$Bile_duct_invasion)
metadataSubset$Liver_fibrosisc <- factor(metadataSubset$Liver_fibrosisc)
metadataSubset$Prognosis <- factor(metadataSubset$Prognosis)
# Creating the DGEList object
dge <- DGEList(counts=tumorAdjacentExpSubset, genes=genes)
colnames(dge) <- colnames(tumorAdjacentExpSubset)
dge$samples$sex <- metadataSubset$Gender
dge$samples$viral <- factor(metadataSubset$Virus_infection)
dge$samples$ID <- metadataSubset$ID
dge$samples$tumor <- metadataSubset$tumor
dge$samples$gender_tissue <- metadataSubset$gender_tissue
dge$samples$gender_tissue_viral <- metadataSubset$gender_tissue_viral
dge$samples$library_type <- metadataSubset$library_type
dge$samples$edmonson_grade <- metadataSubset$Edmondson_grade
dge$samples$Ta <- metadataSubset$Ta
dge$samples$survival <- metadataSubset$Overall_survival_month
# Inspecting the N of samples in each group
table(dge$samples$gender_tissue_viral)
# ======================================
# Filtering expression data
# ======================================
# Keeping genes that have a mean FPKM of at least 0.5 in at least one of the
# groups under investigation and at least 6 reads in at least 10 samples
fpkm <- rpkm(dge, gene.length=dge$genes$length)
M_1_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_1_HBV")],1,mean,na.rm=TRUE)
M_0_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_0_HBV")],1,mean,na.rm=TRUE)
M_1_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_1_HCV")],1,mean,na.rm=TRUE)
M_0_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_0_HCV")],1,mean,na.rm=TRUE)
F_1_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_1_HBV")],1,mean,na.rm=TRUE)
F_0_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_0_HBV")],1,mean,na.rm=TRUE)
F_1_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_1_HCV")],1,mean,na.rm=TRUE)
F_0_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_0_HCV")],1,mean,na.rm=TRUE)
keep <- (M_1_HBV_mean_fpkm > 0.5 | M_0_HBV_mean_fpkm > 0.5 |
M_1_HCV_mean_fpkm > 0.5 | M_0_HCV_mean_fpkm > 0.5 |
F_1_HBV_mean_fpkm > 0.5 | F_0_HBV_mean_fpkm > 0.5 |
F_1_HCV_mean_fpkm > 0.5 | F_0_HCV_mean_fpkm > 0.5 )
dge <- dge[keep,,keep.lib.sizes=FALSE]
dge <- calcNormFactors(dge, method="TMM")
keep <- rowSums(dge$counts > 6) >= 10
dge <- dge[keep,,keep.lib.size=FALSE]
dge <- calcNormFactors(dge, method="TMM")
# N of genes retained after filtering
dim(dge$genes)
# ===================================== ======================
# ===========================================================
# Analysis of all tumor vs. tumor-adjacent regardless of sex
# ===========================================================
# ===========================================================
# Creating a new design model matrix with the variable of interest and the
# library type
design <- model.matrix(~0 + dge$sample$tumor + dge$samples$library_type)
colnames(design) <- gsub("dge\\$samples\\$tumor", "tumor", colnames(design))
colnames(design) <- gsub("dge\\$samples\\$library_typeunstranded", "library_type", colnames(design))
head(design)
# Running voom again with the new design matrix.
v <- voomWithQualityWeights(dge, design, plot=TRUE)
# Removing batch effects
vCorrectLibtype <- removeBatchEffect(v, batch=v$targets$library_type)
pdf("~/Desktop/ResearchProjects/LiverCancer/DEA_removed_samples/newFigures/MDSplots/LibraryTypeStratifiedMDSPlot.pdf")
mds <- plotMDS(v, top = 25, dim.plot = c(1,2), plot=TRUE, cex=2,
pch=ifelse(v$targets$viral %in% c("HBV"), 17,
ifelse(v$targets$viral %in% c("HCV"), 15, 3)),
col=ifelse(v$targets$library_type=="stranded", "#1A85FF",
ifelse(v$targets$library_type=="unstranded", "#D41159", "black")),
gene.selection = "common")
legend("top", pch=c(15),
col=c("#D41159", "#1A85FF") ,
legend=c("Unstranded", "Stranded"))
legend("center", pch=c(17, 15),
col=c("black"),
legend=c("HBV", "HCV"))
dev.off()
# Removing batch effects
vCorrectLibtype <- removeBatchEffect(v, batch=v$targets$library_type)
#creating MDS plot top 25 genes PC 1 and 2 coloring by lesion type and sex
pdf("~/Desktop/ResearchProjects/LiverCancer/DEA_removed_samples/newFigures/MDSplots/removed_samples_MDS_plots_top_25_genes.pdf")
mds <- plotMDS(vCorrectLibtype, top = 25, ndim = 10, dim.plot = c(1,2), plot=TRUE, cex=2,
pch=ifelse(v$targets$viral %in% c("HBV"), 17,
ifelse(v$targets$viral %in% c("HCV"), 15,
ifelse(v$targets$viral %in% c("both"), 16,  3))),
col=ifelse(v$targets$gender_tissue=="M_1",
"#FFC20A",
ifelse(v$targets$gender_tissue=="M_0",
"#E66100",
ifelse(v$targets$gender_tissue=="F_1",
"#40B0A6", "#006CD1"))),
gene.selection = "common")
legend("center", pch=c(15),
col=c( "#FFC20A", "#40B0A6","#E66100", "#006CD1"),
legend=c("Male tumor","Female tumor", "Male adjacent","Female adjacent"))
legend("topright", pch=c(17, 15, 16, 3),
col=c("black"),
legend=c("HBV", "HCV"))
dev.off()
mds <- plotMDS(vCorrectLibtype, top = 25, ndim = 10, dim.plot = c(1,2), plot=TRUE, cex=2,
pch=ifelse(v$targets$viral %in% c("HBV"), 17,
ifelse(v$targets$viral %in% c("HCV"), 15,
ifelse(v$targets$viral %in% c("both"), 16,  3))),
col=ifelse(v$targets$gender_tissue=="M_1",
"#FFC20A",
ifelse(v$targets$gender_tissue=="M_0",
"#E66100",
ifelse(v$targets$gender_tissue=="F_1",
"#40B0A6", "#006CD1"))),
gene.selection = "common")
legend("center", pch=c(15),
col=c( "#FFC20A", "#40B0A6","#E66100", "#006CD1"),
legend=c("Male tumor","Female tumor", "Male adjacent","Female adjacent"))
legend("topright", pch=c(17, 15, 16, 3),
#     col=c("black"),
legend=c("HBV", "HCV"))
