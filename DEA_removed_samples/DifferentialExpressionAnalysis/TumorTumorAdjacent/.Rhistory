metadata <- metadata[!(metadata$ID == "RK066") , ]
metadata <- metadata[!(metadata$ID == "RK096") , ]
#Removing both and NBNC samples
metadata <- metadata[!(metadata$Virus_infection == "NBNC"), ]
metadata <- metadata[!(metadata$Virus_infection == "both"), ]
# Subsetting and ordering metadata to match the count matrix
tumorAdjacentExpSubset <- tumorAdjacentExp[,colnames(tumorAdjacentExp) %in% metadata$sampleid]
metadataSubset <- metadata[metadata$sampleid %in% colnames(tumorAdjacentExpSubset),]
metadataSubset <- metadataSubset[match(colnames(tumorAdjacentExpSubset), metadataSubset$sampleid),]
rownames(metadataSubset) <- metadataSubset$sampleid
# Adding tissue type, converting categorical variables to factors
metadataSubset$tumor <- as.numeric(grepl('tumor', metadataSubset$sampleid, ignore.case=T))
#Swapping lesion type for sample RK169
metadataSubset["RK169-tumor-XY","tumor"] <- 0
metadataSubset["RK169-adjacent-XY","tumor"] <- 1
#Changing rownames to match swapped lesion type
rownames(metadataSubset)[rownames(metadataSubset)=="RK169-tumor-XY"] <- "RK169_adjacent-XY"
rownames(metadataSubset)[rownames(metadataSubset)=="RK169-adjacent-XY"] <- "RK169_tumor-XY"
rownames(metadataSubset)[rownames(metadataSubset)=="RK169_adjacent-XY"] <- "RK169-adjacent-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK169-tumor-XY"] <- "RK169_adjacent-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK169-adjacent-XY"] <- "RK169_tumor-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK169_adjacent-XY"] <- "RK169-adjacent-XY"
#Swapping lesion type for sample RK065
metadataSubset["RK065-tumor-XX","tumor"] <- 0
metadataSubset["RK065-adjacent-XX","tumor"] <- 1
#Changing rownames in metadata to match swapped lesion type
rownames(metadataSubset)[rownames(metadataSubset)=="RK065-tumor-XY"] <- "RK065_adjacent-XY"
rownames(metadataSubset)[rownames(metadataSubset)=="RK065-adjacent-XY"] <- "RK065_tumor-XY"
rownames(metadataSubset)[rownames(metadataSubset)=="RK065_adjacent-XY"] <- "RK065-adjacent-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK065-tumor-XY"] <- "RK065_adjacent-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK065-adjacent-XY"] <- "RK065_tumor-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK065_adjacent-XY"] <- "RK065-adjacent-XY"
metadataSubset$gender_tissue <- paste(metadataSubset$Gender, metadataSubset$tumor, sep="_")
metadataSubset$gender_tissue_viral <- paste(metadataSubset$gender_tissue, metadataSubset$Virus_infection, sep="_")
metadataSubset$library_type <- metadataSubset$strandedness
metadataSubset$library_type <- factor(metadataSubset$library_type)
metadataSubset$tumor <- factor(metadataSubset$tumor)
metadataSubset$Ta <- factor(metadataSubset$Ta)
metadataSubset$Portal_vein_invasion <- factor(metadataSubset$Portal_vein_invasion)
metadataSubset$Hepatic_vein_invasion <- factor(metadataSubset$Hepatic_vein_invasion)
metadataSubset$Bile_duct_invasion <- factor(metadataSubset$Bile_duct_invasion)
metadataSubset$Liver_fibrosisc <- factor(metadataSubset$Liver_fibrosisc)
metadataSubset$Prognosis <- factor(metadataSubset$Prognosis)
# Creating the DGEList object
dge <- DGEList(counts=tumorAdjacentExpSubset, genes=genes)
colnames(dge) <- colnames(tumorAdjacentExpSubset)
dge$samples$sex <- metadataSubset$Gender
dge$samples$viral <- factor(metadataSubset$Virus_infection)
dge$samples$ID <- metadataSubset$ID
dge$samples$tumor <- metadataSubset$tumor
dge$samples$gender_tissue <- metadataSubset$gender_tissue
dge$samples$gender_tissue_viral <- metadataSubset$gender_tissue_viral
dge$samples$library_type <- metadataSubset$library_type
dge$samples$edmonson_grade <- metadataSubset$Edmondson_grade
dge$samples$Ta <- metadataSubset$Ta
dge$samples$survival <- metadataSubset$Overall_survival_month
dge$samples$smoking <- factor(metadataSubset$Smoking)
dge$samples$alcohol <- factor(metadataSubset$Alcohol_intake)
dge$samples$fibrosis <- factor(metadataSubset$Liver_fibrosisc)
# Inspecting the N of samples in each group
table(dge$samples$gender_tissue_viral)
# ======================================
# Filtering expression data
# ======================================
# Keeping genes that have a mean FPKM of at least 0.5 in at least one of the
# groups under investigation and at least 6 reads in at least 10 samples
fpkm <- rpkm(dge, gene.length=dge$genes$length)
M_1_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_1_HBV")],1,mean,na.rm=TRUE)
M_0_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_0_HBV")],1,mean,na.rm=TRUE)
M_1_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_1_HCV")],1,mean,na.rm=TRUE)
M_0_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_0_HCV")],1,mean,na.rm=TRUE)
F_1_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_1_HBV")],1,mean,na.rm=TRUE)
F_0_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_0_HBV")],1,mean,na.rm=TRUE)
F_1_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_1_HCV")],1,mean,na.rm=TRUE)
F_0_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_0_HCV")],1,mean,na.rm=TRUE)
keep <- (M_1_HBV_mean_fpkm > 0.5 | M_0_HBV_mean_fpkm > 0.5 |
M_1_HCV_mean_fpkm > 0.5 | M_0_HCV_mean_fpkm > 0.5 |
F_1_HBV_mean_fpkm > 0.5 | F_0_HBV_mean_fpkm > 0.5 |
F_1_HCV_mean_fpkm > 0.5 | F_0_HCV_mean_fpkm > 0.5 )
dge <- dge[keep,,keep.lib.sizes=FALSE]
dge <- calcNormFactors(dge, method="TMM")
keep <- rowSums(dge$counts > 6) >= 10
dge <- dge[keep,,keep.lib.size=FALSE]
dge <- calcNormFactors(dge, method="TMM")
# N of genes retained after filtering
dim(dge$genes)
# ===================================== ======================
# ===========================================================
# Analysis of all tumor vs. tumor-adjacent regardless of sex
# ===========================================================
# ===========================================================
# Creating design matrix with library type covariate
design <- model.matrix(~0+dge$samples$tumor+dge$samples$library_type)
colnames(design) <- gsub("dge\\$samples\\$tumor", "tumor", colnames(design))
colnames(design) <- gsub("dge\\$samples\\$library_typeunstranded", "library_type", colnames(design))
colnames(design) <- gsub("dge\\$samples\\$Ta2", "Ta2", colnames(design))
colnames(design) <- gsub("dge\\$samples\\$Ta3", "Ta3", colnames(design))
colnames(design) <- gsub("dge\\$samples\\$Ta4", "Ta4", colnames(design))
colnames(design) <- gsub("dge\\$samples\\$smoking", "smoking", colnames(design))
colnames(design) <- gsub("dge\\$samples\\$alcohol", "alcohol", colnames(design))
colnames(design) <- gsub("dge\\$samples\\$fibrosis", "fibrosis", colnames(design))
#colnames(design) <- gsub("dge\\$samples\\$Ta4", "Ta4", colnames(design))
head(design)
# Running voom again with the new design matrix.
v <- voomWithQualityWeights(dge, design, plot=TRUE)
# ============================================================================================
# Differential expression analysis with limma - all male tumor adjacent vs. non-tumor-adjacent
# ===========================================================================================
# Block design for individual. This is used in tumor-normal comparisons with
# paired samples.
corfit <- duplicateCorrelation(v, design, block = v$targets$ID)
# This should give a positive correlation value. It represents the
# correlation between measurements made on the same person.
corfit$consensus
# Fitting the linear model with limma.
# If using paired samples, the within-patient correlation and a block design
# for patient is used to account for pairwise samples
fit <- lmFit(v, design, block = v$targets$ID, correlation = corfit$consensus)
# Contrast design for differential expression
# Defining pairwise comparisons
contrasts <- makeContrasts(Adjacent_vs_Tumor = tumor1 - tumor0,
levels=colnames(design))
head(contrasts)
# Assigning all comparisons to a vector for later
allComparisons <- colnames(contrasts)
# Running contrast analysis
vfit <- contrasts.fit(fit, contrasts = contrasts)
# Look at N of DEGs with adj. p <0.01 and log2FC>2
summary(decideTests(vfit, adjust.method = "BH", p.value = 0.05, lfc = 2))
# Computing differential expression based on the empirical Bayes moderation of
# the standard errors towards a common value. Robust = should the estimation of
# the empirical Bayes prior parameters be robustified against outlier sample
# variances?
veBayesFit <- eBayes(vfit, robust=TRUE)
#pdf("~/Desktop/Research Projects/Liver Cancer Project/Figures/tumor tumor adjacent final model plot.pdf", width=12, height=12)
plotSA(veBayesFit, main = "Final model: Mean-variance trend")
dev.off()
vTopTable <- topTable(veBayesFit, n=Inf, p.value=1, lfc=0)
DEGs <- topTable(veBayesFit, n=Inf, p.value=0.05, lfc=2)
DEGs_print <- data.frame(DEGs$GENEID, DEGs$gene_name, DEGs$adj.P.Val, DEGs$logFC)
write.csv(DEGs_print, "~/Desktop/ResearchProjects/LiverCancer/DEA_removed_samples/DifferentialExpressionAnalysis/TumorTumorAdjacent/GeneList/gene_list_tumor_vs_tumor_adjacent.csv")
# ===========================================
#Volcano plot of tumor vs tumor-adjacent
# ===========================================
df <- data.frame(vTopTable$adj.P.Val, vTopTable$logFC, vTopTable$chr, vTopTable$GENEID, vTopTable$gene_name)
colnames(df) <- c("adj.P.Val", "logFC", "chr", "id", "name")
dfSig <- df[(abs(df$logFC) >= 2 & df$adj.P.Val <= 0.05),]$id
dfAnons <- subset(df, chr != "chrX" & chr != "chrY" & !(id %in% dfSig))
dfAnons <- cbind(dfAnons , rep(1, nrow(dfAnons)))
colnames(dfAnons)[6] <- "Color"
dfXnons <- subset(df, chr == "chrX" & !(id %in% dfSig))
dfXnons <- cbind(dfXnons, rep(2, nrow(dfXnons)))
colnames(dfXnons)[6] <- "Color"
dfYnons <- subset(df, chr == "chrY" & !(id %in% dfSig))
dfYnons <- cbind(dfYnons, rep(3, nrow(dfYnons)))
colnames(dfYnons)[6] <- "Color"
dfA <- subset(df, chr != "chrX" & chr != "chrY" & id %in% dfSig)
dfA <- cbind(dfA, rep(4, nrow(dfA)))
colnames(dfA)[6] <- "Color"
dfX <- subset(df, chr == "chrX" & id %in% dfSig)
dfX <- cbind(dfX, rep(5, nrow(dfX)))
colnames(dfX)[6] <- "Color"
dfY <- subset(df, chr == "chrY" & id %in% dfSig)
dfY <- cbind(dfY, rep(6, nrow(dfY)))
colnames(dfY)[6] <- "Color"
dfPlot <- rbind(dfAnons, dfXnons, dfYnons, dfA, dfX, dfY)
dfPlot$Color <- as.factor(dfPlot$Color)
# Constructing the plot object. The colors will not work the way they should if
# one of the groups doesn't have any genes
p <- ggplot(data = dfPlot, aes(x = logFC, y = -log10(adj.P.Val), color=Color )) +
geom_point(alpha = 0.5, size = 8) +
theme_bw() +
theme(legend.position = "none") +
xlim(c(-15, 15)) + ylim(c(0, 130)) +
scale_color_manual(values = c("azure3", "pink", "seagreen2", "black", "mediumvioletred", "springgreen")) +
labs(x=expression(log[2](FC)),
y=expression(-log[10] ~ "(FDR-adjusted " ~ italic("p") ~ "-value)")) +
theme(axis.title.x=element_text(size=12),
axis.text.x=element_text(size=10)) +
theme(axis.title.y=element_text(size=12),
axis.text.y=element_text(size=10))
p
forLabel <- subset(dfPlot, adj.P.Val<=0.05 & abs(logFC)>=2)
# Adding lines for significance thresholds
#pdf("~/3.0 Hasting Research/Liver Cancer Analysis/DEG Figures/Volcano_plot_tumor_tumoradjacent_DEGs.pdf", width=12, height=12)
#plotting to RMD file
p + geom_hline(yintercept = 1.3, colour="#000000", linetype="dashed"
) + geom_vline(xintercept = 2, colour="#000000", linetype="dashed"
) + geom_vline(xintercept = -2, colour="#000000", linetype="dashed"
) + geom_text_repel(data=forLabel, max.iter=1000, box.padding = 0.25, force=1, aes(x = logFC, y = -log10(adj.P.Val), label=name, color=Color), size=8)
#plotting to PDF
pdf("~/Desktop/ResearchProjects/LiverCancer/DEA_removed_samples/DifferentialExpressionAnalysis/TumorTumorAdjacent/Figures/Volcano_Tumor_vs_Tumor_adjacent_1.pdf", width=12, height=12)
p + geom_hline(yintercept = 1.3, colour="#000000", linetype="dashed"
) + geom_vline(xintercept = 2, colour="#000000", linetype="dashed"
) + geom_vline(xintercept = -2, colour="#000000", linetype="dashed"
) + geom_text_repel(data=forLabel, max.iter=1000, box.padding = 0.25, force=1, aes(x = logFC, y = -log10(adj.P.Val), label=name, color=Color), size=8)
df <- data.frame(vTopTable$adj.P.Val, vTopTable$logFC, vTopTable$chr, vTopTable$GENEID, vTopTable$gene_name)
colnames(df) <- c("adj.P.Val", "logFC", "chr", "id", "name")
dfSig <- df[(abs(df$logFC) >= 2 & df$adj.P.Val <= 0.05),]$id
p<- ggplot(data=df, aes(x=logFC, y=-log10(adj.P.Val))) + geom_point(alpha=0.5)+theme_bw()
p2 <-  p+ geom_vline(xintercept=c(-2, 2), linetype= "dashed", size=1.5) + geom_hline(yintercept= 2, linetype= "dashed", size=1.5) +  xlim(c(-10, 10)) #+ ylim(c(0, 50))
p3<- p2+ theme(legend.position = c(0.925,0.75)) + geom_point(aes(color=abs(logFC)>=2 & adj.P.Val<=0.05), size=4)+theme(legend.position="none")+scale_color_manual(values = c("black","maroon"))
p4<- p3+theme(axis.title = element_text(size=35), axis.text = element_text(size=35, color="black"), legend.title = element_text(size=35)) + labs(x= "log fold change", y="-log(FDR- adjusted p value)")
p4
pdf("~/Desktop/ResearchProjects/LiverCancer/DEA_removed_samples/DifferentialExpressionAnalysis/TumorTumorAdjacent/Figures/Volcano_Tumor_vs_Tumor_adjacent_2.pdf", width=12, height=12)
p4
dev.off()
# =================
# Enriched pathways
# =================
degResult_genes <- DEGs
degResult_genes$hgnc_symbol <- degResult_genes$name
ensembl <- useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
#biomart <- getBM(attributes=c('ensembl_gene_id', 'hgnc_symbol', 'entrezgene_id', 'kegg_enzyme'), filters = 'hgnc_symbol', values = degResult_genes$gene_name, mart = ensembl)
biomart <- getBM(attributes=c('ensembl_gene_id', 'hgnc_symbol', 'entrezgene_id'), filters = 'hgnc_symbol', values = degResult_genes$gene_name, mart = ensembl)
colnames(degResult_genes) <- c("chr", "start", "end", "TXNAME", "GENEID", "hgnc_symbol", "length",
"logFC", "AveExpr", "t", "P.Value", "adj.P.Val", "B")
degResult_genes_biomart <- merge(degResult_genes, biomart, by="hgnc_symbol")
head(degResult_genes_biomart)
degResult <- DEGs
degResult$hgnc_symbol <- degResult$gene_name
degResult_biomart <- merge(degResult, biomart, by="hgnc_symbol")
degResult_biomart <- degResult_biomart[complete.cases(degResult_biomart), ]
geneList <- degResult_biomart$entrezgene_id
geneList_quant <- degResult_biomart$logFC
ego <- enrichGO(geneList, OrgDb = "org.Hs.eg.db", ont="BP", readable=TRUE)
#pdf("~/3.0 Hasting Research/Liver Cancer Analysis/GO_KEGG Figures/dotplot_all_tumor_vs_tumor_adjacent.pdf", width=12, height=12)
dotplot(ego, showCategory=30)
geneList <- degResult_biomart$entrezgene_id
geneList_quant <- degResult_biomart$logFC
ego <- enrichGO(geneList, OrgDb = "org.Hs.eg.db", ont="BP", readable=TRUE)
#pdf("~/3.0 Hasting Research/Liver Cancer Analysis/GO_KEGG Figures/dotplot_all_tumor_vs_tumor_adjacent.pdf", width=12, height=12)
pdf("~/Desktop/ResearchProjects/LiverCancer/DEA_removed_samples/DifferentialExpressionAnalysis/TumorTumorAdjacent/Figures/GO_KEGG_Tumor_vs_Tumor_adjacent.pdf", width=12, height=12)
print(dotplot(ego, showCategory=30))
#dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(RColorBrewer)
library(matrixStats)
library(ggplot2)
library(edgeR)
library(DESeq2)
library(limma)
library(doParallel)
library(variancePartition)
library(clusterProfiler)
library(GOSemSim)
library(biomaRt)
library(UpSetR)
library(VennDiagram)
library(ggrepel)
library(dplyr)
library(stringr)
library(forcats)
library(stats)
library(gridExtra)
viralPalette <- brewer.pal(8, "Set1")
hbvColor <- viralPalette[1]
hcvColor <- viralPalette[2]
bothColor <- viralPalette[3]
neitherColor <- viralPalette[4]
sexTissuePalette <- brewer.pal(12, "Paired")
maleTumorColor <- sexTissuePalette[4]
maleAdjacentColor <- sexTissuePalette[3]
femaleTumorColor <- sexTissuePalette[6]
femaleAdjacentColor <- sexTissuePalette[5]
metadata <- read.table("~/Desktop/ResearchProjects/LiverCancer/Metadata/metadata_for_de.csv", row.names=1,header=TRUE, sep=",") #changing the name of the file
tumorAdjacentExp <- read.table("~/Desktop/ResearchProjects/LiverCancer/Metadata/japan_all_samples_salmon_expression_counts.txt", row.names = 1, header=TRUE) #changing the name of the file
colnames(tumorAdjacentExp) <- gsub("\\.", "-", colnames(tumorAdjacentExp)) #changing the column names
# Importing gene annotations
#genes <- read.table("gencode.v25.chr_patch_hapl_scaff.annotation.bed", header=FALSE, sep="\t")
genes <- read.table("~/Desktop/ResearchProjects/LiverCancer/Metadata/gencodeTranscripts.txt", header=TRUE, sep="\t")
genes <- data.frame(genes)
tumorAdjacentExp <- tumorAdjacentExp[rownames(tumorAdjacentExp) %in% genes$GENEID ,]
genes <- genes[match(rownames(tumorAdjacentExp), genes$GENEID),]
# Calculating gene length, this is needed for calculating the FPKM values
genes$length <- with(genes, end - start)
# Removing Samples due to low quality
metadata <- metadata[!(metadata$ID == "RK023") , ]
metadata <- metadata[!(metadata$ID == "RK106") , ]
metadata <- metadata[!(metadata$ID == "RK113") , ]
metadata <- metadata[!(metadata$ID == "RK135") , ]
metadata <- metadata[!(metadata$ID == "RK105") , ]
metadata <- metadata[!(metadata$ID == "RK116") , ]
metadata <- metadata[!(metadata$ID == "RK066") , ]
metadata <- metadata[!(metadata$ID == "RK096") , ]
#Removing both and NBNC samples
metadata <- metadata[!(metadata$Virus_infection == "NBNC"), ]
metadata <- metadata[!(metadata$Virus_infection == "both"), ]
# Subsetting and ordering metadata to match the count matrix
tumorAdjacentExpSubset <- tumorAdjacentExp[,colnames(tumorAdjacentExp) %in% metadata$sampleid]
metadataSubset <- metadata[metadata$sampleid %in% colnames(tumorAdjacentExpSubset),]
metadataSubset <- metadataSubset[match(colnames(tumorAdjacentExpSubset), metadataSubset$sampleid),]
rownames(metadataSubset) <- metadataSubset$sampleid
# Adding tissue type, converting categorical variables to factors
metadataSubset$tumor <- as.numeric(grepl('tumor', metadataSubset$sampleid, ignore.case=T))
#Swapping lesion type for sample RK169
metadataSubset["RK169-tumor-XY","tumor"] <- 0
metadataSubset["RK169-adjacent-XY","tumor"] <- 1
#Changing rownames to match swapped lesion type
rownames(metadataSubset)[rownames(metadataSubset)=="RK169-tumor-XY"] <- "RK169_adjacent-XY"
rownames(metadataSubset)[rownames(metadataSubset)=="RK169-adjacent-XY"] <- "RK169_tumor-XY"
rownames(metadataSubset)[rownames(metadataSubset)=="RK169_adjacent-XY"] <- "RK169-adjacent-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK169-tumor-XY"] <- "RK169_adjacent-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK169-adjacent-XY"] <- "RK169_tumor-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK169_adjacent-XY"] <- "RK169-adjacent-XY"
#Swapping lesion type for sample RK065
metadataSubset["RK065-tumor-XX","tumor"] <- 0
metadataSubset["RK065-adjacent-XX","tumor"] <- 1
#Changing rownames in metadata to match swapped lesion type
rownames(metadataSubset)[rownames(metadataSubset)=="RK065-tumor-XY"] <- "RK065_adjacent-XY"
rownames(metadataSubset)[rownames(metadataSubset)=="RK065-adjacent-XY"] <- "RK065_tumor-XY"
rownames(metadataSubset)[rownames(metadataSubset)=="RK065_adjacent-XY"] <- "RK065-adjacent-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK065-tumor-XY"] <- "RK065_adjacent-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK065-adjacent-XY"] <- "RK065_tumor-XY"
rownames(tumorAdjacentExpSubset)[rownames(tumorAdjacentExpSubset)=="RK065_adjacent-XY"] <- "RK065-adjacent-XY"
metadataSubset$gender_tissue <- paste(metadataSubset$Gender, metadataSubset$tumor, sep="_")
metadataSubset$gender_tissue_viral <- paste(metadataSubset$gender_tissue, metadataSubset$Virus_infection, sep="_")
metadataSubset$library_type <- metadataSubset$strandedness
metadataSubset$library_type <- factor(metadataSubset$library_type)
metadataSubset$tumor <- factor(metadataSubset$tumor)
metadataSubset$Ta <- factor(metadataSubset$Ta)
metadataSubset$Portal_vein_invasion <- factor(metadataSubset$Portal_vein_invasion)
metadataSubset$Hepatic_vein_invasion <- factor(metadataSubset$Hepatic_vein_invasion)
metadataSubset$Bile_duct_invasion <- factor(metadataSubset$Bile_duct_invasion)
metadataSubset$Liver_fibrosisc <- factor(metadataSubset$Liver_fibrosisc)
metadataSubset$Prognosis <- factor(metadataSubset$Prognosis)
# Creating the DGEList object
dge <- DGEList(counts=tumorAdjacentExpSubset, genes=genes)
colnames(dge) <- colnames(tumorAdjacentExpSubset)
dge$samples$sex <- metadataSubset$Gender
dge$samples$viral <- factor(metadataSubset$Virus_infection)
dge$samples$ID <- metadataSubset$ID
dge$samples$tumor <- metadataSubset$tumor
dge$samples$gender_tissue <- metadataSubset$gender_tissue
dge$samples$gender_tissue_viral <- metadataSubset$gender_tissue_viral
dge$samples$library_type <- metadataSubset$library_type
dge$samples$edmonson_grade <- metadataSubset$Edmondson_grade
dge$samples$Ta <- metadataSubset$Ta
dge$samples$survival <- metadataSubset$Overall_survival_month
dge$samples$smoking <- factor(metadataSubset$Smoking)
dge$samples$alcohol <- factor(metadataSubset$Alcohol_intake)
dge$samples$fibrosis <- factor(metadataSubset$Liver_fibrosisc)
# Inspecting the N of samples in each group
table(dge$samples$gender_tissue_viral)
# ======================================
# Filtering expression data
# ======================================
# Keeping genes that have a mean FPKM of at least 0.5 in at least one of the
# groups under investigation and at least 6 reads in at least 10 samples
fpkm <- rpkm(dge, gene.length=dge$genes$length)
M_1_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_1_HBV")],1,mean,na.rm=TRUE)
M_0_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_0_HBV")],1,mean,na.rm=TRUE)
M_1_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_1_HCV")],1,mean,na.rm=TRUE)
M_0_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="M_0_HCV")],1,mean,na.rm=TRUE)
F_1_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_1_HBV")],1,mean,na.rm=TRUE)
F_0_HBV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_0_HBV")],1,mean,na.rm=TRUE)
F_1_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_1_HCV")],1,mean,na.rm=TRUE)
F_0_HCV_mean_fpkm <- apply(as.data.frame(fpkm)[(dge$samples$gender_tissue_viral=="F_0_HCV")],1,mean,na.rm=TRUE)
keep <- (M_1_HBV_mean_fpkm > 0.5 | M_0_HBV_mean_fpkm > 0.5 |
M_1_HCV_mean_fpkm > 0.5 | M_0_HCV_mean_fpkm > 0.5 |
F_1_HBV_mean_fpkm > 0.5 | F_0_HBV_mean_fpkm > 0.5 |
F_1_HCV_mean_fpkm > 0.5 | F_0_HCV_mean_fpkm > 0.5 )
dge <- dge[keep,,keep.lib.sizes=FALSE]
dge <- calcNormFactors(dge, method="TMM")
keep <- rowSums(dge$counts > 6) >= 10
dge <- dge[keep,,keep.lib.size=FALSE]
dge <- calcNormFactors(dge, method="TMM")
# N of genes retained after filtering
dim(dge$genes)
# ===================================== ======================
# ===========================================================
# Analysis of all tumor vs. tumor-adjacent regardless of sex
# ===========================================================
# ===========================================================
# Creating design matrix with library type covariate
design <- model.matrix(~0+dge$samples$tumor+dge$samples$library_type+dge$samples$sex)
colnames(design) <- gsub("dge\\$samples\\$tumor", "tumor", colnames(design))
colnames(design) <- gsub("dge\\$samples\\$library_typeunstranded", "library_type", colnames(design))
colnames(design) <- gsub("dge\\$samples\\$sex", "sex", colnames(design))
head(design)
# Running voom again with the new design matrix.
v <- voomWithQualityWeights(dge, design, plot=TRUE)
# ============================================================================================
# Differential expression analysis with limma - all male tumor adjacent vs. non-tumor-adjacent
# ===========================================================================================
# Block design for individual. This is used in tumor-normal comparisons with
# paired samples.
corfit <- duplicateCorrelation(v, design, block = v$targets$ID)
# This should give a positive correlation value. It represents the
# correlation between measurements made on the same person.
corfit$consensus
# Fitting the linear model with limma.
# If using paired samples, the within-patient correlation and a block design
# for patient is used to account for pairwise samples
fit <- lmFit(v, design, block = v$targets$ID, correlation = corfit$consensus)
# Contrast design for differential expression
# Defining pairwise comparisons
contrasts <- makeContrasts(Adjacent_vs_Tumor = tumor1 - tumor0,
levels=colnames(design))
head(contrasts)
# Assigning all comparisons to a vector for later
allComparisons <- colnames(contrasts)
# Running contrast analysis
vfit <- contrasts.fit(fit, contrasts = contrasts)
# Look at N of DEGs with adj. p <0.01 and log2FC>2
summary(decideTests(vfit, adjust.method = "BH", p.value = 0.05, lfc = 2))
# Computing differential expression based on the empirical Bayes moderation of
# the standard errors towards a common value. Robust = should the estimation of
# the empirical Bayes prior parameters be robustified against outlier sample
# variances?
veBayesFit <- eBayes(vfit, robust=TRUE)
#pdf("~/Desktop/Research Projects/Liver Cancer Project/Figures/tumor tumor adjacent final model plot.pdf", width=12, height=12)
plotSA(veBayesFit, main = "Final model: Mean-variance trend")
dev.off()
vTopTable <- topTable(veBayesFit, n=Inf, p.value=1, lfc=0)
DEGs <- topTable(veBayesFit, n=Inf, p.value=0.05, lfc=2)
DEGs_print <- data.frame(DEGs$GENEID, DEGs$gene_name, DEGs$adj.P.Val, DEGs$logFC)
write.csv(DEGs_print, "~/Desktop/ResearchProjects/LiverCancer/DEA_removed_samples/DifferentialExpressionAnalysis/TumorTumorAdjacent/GeneList/gene_list_tumor_vs_tumor_adjacent_sex_covariate.csv")
# ===========================================
#Volcano plot of tumor vs tumor-adjacent
# ===========================================
df <- data.frame(vTopTable$adj.P.Val, vTopTable$logFC, vTopTable$chr, vTopTable$GENEID, vTopTable$gene_name)
colnames(df) <- c("adj.P.Val", "logFC", "chr", "id", "name")
dfSig <- df[(abs(df$logFC) >= 2 & df$adj.P.Val <= 0.05),]$id
dfAnons <- subset(df, chr != "chrX" & chr != "chrY" & !(id %in% dfSig))
dfAnons <- cbind(dfAnons , rep(1, nrow(dfAnons)))
colnames(dfAnons)[6] <- "Color"
dfXnons <- subset(df, chr == "chrX" & !(id %in% dfSig))
dfXnons <- cbind(dfXnons, rep(2, nrow(dfXnons)))
colnames(dfXnons)[6] <- "Color"
dfYnons <- subset(df, chr == "chrY" & !(id %in% dfSig))
dfYnons <- cbind(dfYnons, rep(3, nrow(dfYnons)))
colnames(dfYnons)[6] <- "Color"
dfA <- subset(df, chr != "chrX" & chr != "chrY" & id %in% dfSig)
dfA <- cbind(dfA, rep(4, nrow(dfA)))
colnames(dfA)[6] <- "Color"
dfX <- subset(df, chr == "chrX" & id %in% dfSig)
dfX <- cbind(dfX, rep(5, nrow(dfX)))
colnames(dfX)[6] <- "Color"
dfY <- subset(df, chr == "chrY" & id %in% dfSig)
dfY <- cbind(dfY, rep(6, nrow(dfY)))
colnames(dfY)[6] <- "Color"
dfPlot <- rbind(dfAnons, dfXnons, dfYnons, dfA, dfX, dfY)
dfPlot$Color <- as.factor(dfPlot$Color)
# Constructing the plot object. The colors will not work the way they should if
# one of the groups doesn't have any genes
p <- ggplot(data = dfPlot, aes(x = logFC, y = -log10(adj.P.Val), color=Color )) +
geom_point(alpha = 0.5, size = 8) +
theme_bw() +
theme(legend.position = "none") +
xlim(c(-15, 15)) + ylim(c(0, 130)) +
scale_color_manual(values = c("azure3", "pink", "seagreen2", "black", "mediumvioletred", "springgreen")) +
labs(x=expression(log[2](FC)),
y=expression(-log[10] ~ "(FDR-adjusted " ~ italic("p") ~ "-value)")) +
theme(axis.title.x=element_text(size=12),
axis.text.x=element_text(size=10)) +
theme(axis.title.y=element_text(size=12),
axis.text.y=element_text(size=10))
p
forLabel <- subset(dfPlot, adj.P.Val<=0.05 & abs(logFC)>=2)
# Adding lines for significance thresholds
#pdf("~/3.0 Hasting Research/Liver Cancer Analysis/DEG Figures/Volcano_plot_tumor_tumoradjacent_DEGs.pdf", width=12, height=12)
#plotting to RMD file
p + geom_hline(yintercept = 1.3, colour="#000000", linetype="dashed"
) + geom_vline(xintercept = 2, colour="#000000", linetype="dashed"
) + geom_vline(xintercept = -2, colour="#000000", linetype="dashed"
) + geom_text_repel(data=forLabel, max.iter=1000, box.padding = 0.25, force=1, aes(x = logFC, y = -log10(adj.P.Val), label=name, color=Color), size=8)
#plotting to PDF
pdf("~/Desktop/ResearchProjects/LiverCancer/DEA_removed_samples/DifferentialExpressionAnalysis/TumorTumorAdjacent/Figures/Volcano_Tumor_vs_Tumor_adjacent_sex_covariate_1.pdf", width=12, height=12)
p + geom_hline(yintercept = 1.3, colour="#000000", linetype="dashed"
) + geom_vline(xintercept = 2, colour="#000000", linetype="dashed"
) + geom_vline(xintercept = -2, colour="#000000", linetype="dashed"
) + geom_text_repel(data=forLabel, max.iter=1000, box.padding = 0.25, force=1, aes(x = logFC, y = -log10(adj.P.Val), label=name, color=Color), size=8)
df <- data.frame(vTopTable$adj.P.Val, vTopTable$logFC, vTopTable$chr, vTopTable$GENEID, vTopTable$gene_name)
colnames(df) <- c("adj.P.Val", "logFC", "chr", "id", "name")
dfSig <- df[(abs(df$logFC) >= 2 & df$adj.P.Val <= 0.05),]$id
p<- ggplot(data=df, aes(x=logFC, y=-log10(adj.P.Val))) + geom_point(alpha=0.5)+theme_bw()
p2 <-  p+ geom_vline(xintercept=c(-2, 2), linetype= "dashed", size=1.5) + geom_hline(yintercept= 2, linetype= "dashed", size=1.5) +  xlim(c(-10, 10)) #+ ylim(c(0, 50))
p3<- p2+ theme(legend.position = c(0.925,0.75)) + geom_point(aes(color=abs(logFC)>=2 & adj.P.Val<=0.05), size=4)+theme(legend.position="none")+scale_color_manual(values = c("black","maroon"))
p4<- p3+theme(axis.title = element_text(size=35), axis.text = element_text(size=35, color="black"), legend.title = element_text(size=35)) + labs(x= "log fold change", y="-log(FDR- adjusted p value)")
p4
pdf("~/Desktop/ResearchProjects/LiverCancer/DEA_removed_samples/DifferentialExpressionAnalysis/TumorTumorAdjacent/Figures/Volcano_Tumor_vs_Tumor_adjacent_sex_covariate_2.pdf", width=12, height=12)
p4
dev.off()
# =================
# Enriched pathways
# =================
degResult_genes <- DEGs
degResult_genes$hgnc_symbol <- degResult_genes$name
ensembl <- useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
#biomart <- getBM(attributes=c('ensembl_gene_id', 'hgnc_symbol', 'entrezgene_id', 'kegg_enzyme'), filters = 'hgnc_symbol', values = degResult_genes$gene_name, mart = ensembl)
biomart <- getBM(attributes=c('ensembl_gene_id', 'hgnc_symbol', 'entrezgene_id'), filters = 'hgnc_symbol', values = degResult_genes$gene_name, mart = ensembl)
colnames(degResult_genes) <- c("chr", "start", "end", "TXNAME", "GENEID", "hgnc_symbol", "length",
"logFC", "AveExpr", "t", "P.Value", "adj.P.Val", "B")
degResult_genes_biomart <- merge(degResult_genes, biomart, by="hgnc_symbol")
head(degResult_genes_biomart)
degResult <- DEGs
degResult$hgnc_symbol <- degResult$gene_name
degResult_biomart <- merge(degResult, biomart, by="hgnc_symbol")
degResult_biomart <- degResult_biomart[complete.cases(degResult_biomart), ]
geneList <- degResult_biomart$entrezgene_id
geneList_quant <- degResult_biomart$logFC
ego <- enrichGO(geneList, OrgDb = "org.Hs.eg.db", ont="BP", readable=TRUE)
#pdf("~/3.0 Hasting Research/Liver Cancer Analysis/GO_KEGG Figures/dotplot_all_tumor_vs_tumor_adjacent.pdf", width=12, height=12)
dotplot(ego, showCategory=30)
geneList <- degResult_biomart$entrezgene_id
geneList_quant <- degResult_biomart$logFC
ego <- enrichGO(geneList, OrgDb = "org.Hs.eg.db", ont="BP", readable=TRUE)
#pdf("~/3.0 Hasting Research/Liver Cancer Analysis/GO_KEGG Figures/dotplot_all_tumor_vs_tumor_adjacent.pdf", width=12, height=12)
pdf("~/Desktop/ResearchProjects/LiverCancer/DEA_removed_samples/DifferentialExpressionAnalysis/TumorTumorAdjacent/Figures/GO_KEGG_Tumor_vs_Tumor_adjacent_sex_covariate.pdf", width=12, height=12)
print(dotplot(ego, showCategory=30))
#dev.off()
